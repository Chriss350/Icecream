{"version":3,"sources":["../../../src/plugins/zoom/lg-zoom.ts","../../../src/plugins/zoom/lg-zoom-settings.ts","../../../src/lg-events.ts"],"names":[],"mappings":"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","file":"lg-zoom.umd.af6a3651.js","sourceRoot":"../src","sourcesContent":["import { ZoomSettings, zoomSettings } from './lg-zoom-settings';\nimport { LgQuery, lgQuery } from '../../lgQuery';\nimport { LightGallery } from '../../lightgallery';\nimport { lGEvents } from '../../lg-events';\n\ninterface Coords {\n    x: number;\n    y: number;\n}\n\ninterface DragAllowedAxises {\n    allowX: boolean;\n    allowY: boolean;\n}\ninterface ZoomTouchEvent {\n    pageX: number;\n    touches: { pageY: number; pageX: number }[];\n    pageY: number;\n}\ninterface PossibleCords {\n    minX: number;\n    minY: number;\n    maxX: number;\n    maxY: number;\n}\nexport default class Zoom {\n    private core: LightGallery;\n    private settings: ZoomSettings;\n    private $LG!: LgQuery;\n    private imageReset!: number | boolean;\n    zoomableTimeout: any;\n    positionChanged!: boolean;\n    pageX!: number;\n    pageY!: number;\n    scale!: number;\n\n    containerRect!: ClientRect;\n    dragAllowedAxises!: DragAllowedAxises;\n    top!: number;\n    left!: number;\n    scrollTop!: number;\n    constructor(instance: LightGallery, $LG: LgQuery) {\n        // get lightGallery core plugin instance\n        this.core = instance;\n        this.$LG = $LG;\n\n        this.settings = { ...zoomSettings, ...this.core.settings };\n\n        return this;\n    }\n\n    // Append Zoom controls. Actual size, Zoom-in, Zoom-out\n    buildTemplates(): void {\n        let zoomIcons = this.settings.showZoomInOutIcons\n            ? `<button id=\"${this.core.getIdName(\n                  'lg-zoom-in',\n              )}\" type=\"button\" aria-label=\"${\n                  this.settings.zoomPluginStrings['zoomIn']\n              }\" class=\"lg-zoom-in lg-icon\"></button><button id=\"${this.core.getIdName(\n                  'lg-zoom-out',\n              )}\" type=\"button\" aria-label=\"${\n                  this.settings.zoomPluginStrings['zoomIn']\n              }\" class=\"lg-zoom-out lg-icon\"></button>`\n            : '';\n\n        if (this.settings.actualSize) {\n            zoomIcons += `<button id=\"${this.core.getIdName(\n                'lg-actual-size',\n            )}\" type=\"button\" aria-label=\"${\n                this.settings.zoomPluginStrings['viewActualSize']\n            }\" class=\"${\n                this.settings.actualSizeIcons.zoomIn\n            } lg-icon\"></button>`;\n        }\n\n        this.core.outer.addClass('lg-use-transition-for-zoom');\n\n        this.core.$toolbar.first().append(zoomIcons);\n    }\n\n    /**\n     * @desc Enable zoom option only once the image is completely loaded\n     * If zoomFromOrigin is true, Zoom is enabled once the dummy image has been inserted\n     *\n     * Zoom styles are defined under lg-zoomable CSS class.\n     */\n    enableZoom(event: CustomEvent): void {\n        // delay will be 0 except first time\n        let _speed = this.settings.enableZoomAfter + event.detail.delay;\n\n        // set _speed value 0 if gallery opened from direct url and if it is first slide\n        if (\n            this.$LG('body').first().hasClass('lg-from-hash') &&\n            event.detail.delay\n        ) {\n            // will execute only once\n            _speed = 0;\n        } else {\n            // Remove lg-from-hash to enable starting animation.\n            this.$LG('body').first().removeClass('lg-from-hash');\n        }\n\n        this.zoomableTimeout = setTimeout(() => {\n            if (!this.isImageSlide()) {\n                return;\n            }\n            this.core.getSlideItem(event.detail.index).addClass('lg-zoomable');\n            if (event.detail.index === this.core.index) {\n                this.setZoomEssentials();\n            }\n        }, _speed + 30);\n    }\n\n    enableZoomOnSlideItemLoad(): void {\n        // Add zoomable class\n        this.core.LGel.on(\n            `${lGEvents.slideItemLoad}.zoom`,\n            this.enableZoom.bind(this),\n        );\n    }\n\n    getDragCords(e: MouseEvent): Coords {\n        return {\n            x: e.pageX,\n            y: e.pageY,\n        };\n    }\n    getSwipeCords(e: TouchEvent): Coords {\n        const x = e.touches[0].pageX;\n        const y = e.touches[0].pageY;\n        return {\n            x,\n            y,\n        };\n    }\n\n    getDragAllowedAxises(scale: number, scaleDiff?: number): DragAllowedAxises {\n        const $image = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-image')\n            .first()\n            .get();\n\n        let height = 0;\n        let width = 0;\n        const rect = $image.getBoundingClientRect();\n        if (scale) {\n            height = $image.offsetHeight * scale;\n            width = $image.offsetWidth * scale;\n        } else if (scaleDiff) {\n            height = rect.height + scaleDiff * rect.height;\n            width = rect.width + scaleDiff * rect.width;\n        } else {\n            height = rect.height;\n            width = rect.width;\n        }\n        const allowY = height > this.containerRect.height;\n        const allowX = width > this.containerRect.width;\n        return {\n            allowX,\n            allowY,\n        };\n    }\n\n    setZoomEssentials(): void {\n        this.containerRect = this.core.$content.get().getBoundingClientRect();\n    }\n\n    /**\n     * @desc Image zoom\n     * Translate the wrap and scale the image to get better user experience\n     *\n     * @param {String} scale - Zoom decrement/increment value\n     */\n    zoomImage(\n        scale: number,\n        scaleDiff: number,\n        reposition: boolean,\n        resetToMax: boolean,\n    ): void {\n        if (Math.abs(scaleDiff) <= 0) return;\n\n        const offsetX = this.containerRect.width / 2 + this.containerRect.left;\n\n        const offsetY =\n            this.containerRect.height / 2 +\n            this.containerRect.top +\n            this.scrollTop;\n\n        let originalX;\n        let originalY;\n\n        if (scale === 1) {\n            this.positionChanged = false;\n        }\n\n        const dragAllowedAxises = this.getDragAllowedAxises(0, scaleDiff);\n\n        const { allowY, allowX } = dragAllowedAxises;\n        if (this.positionChanged) {\n            originalX = this.left / (this.scale - scaleDiff);\n            originalY = this.top / (this.scale - scaleDiff);\n            this.pageX = offsetX - originalX;\n            this.pageY = offsetY - originalY;\n\n            this.positionChanged = false;\n        }\n\n        const possibleSwipeCords = this.getPossibleSwipeDragCords(scaleDiff);\n\n        let x;\n        let y;\n        let _x = offsetX - this.pageX;\n        let _y = offsetY - this.pageY;\n\n        if (scale - scaleDiff > 1) {\n            const scaleVal = (scale - scaleDiff) / Math.abs(scaleDiff);\n            _x =\n                (scaleDiff < 0 ? -_x : _x) +\n                this.left * (scaleVal + (scaleDiff < 0 ? -1 : 1));\n            _y =\n                (scaleDiff < 0 ? -_y : _y) +\n                this.top * (scaleVal + (scaleDiff < 0 ? -1 : 1));\n            x = _x / scaleVal;\n            y = _y / scaleVal;\n        } else {\n            const scaleVal = (scale - scaleDiff) * scaleDiff;\n            x = _x * scaleVal;\n            y = _y * scaleVal;\n        }\n\n        if (reposition) {\n            if (allowX) {\n                if (this.isBeyondPossibleLeft(x, possibleSwipeCords.minX)) {\n                    x = possibleSwipeCords.minX;\n                } else if (\n                    this.isBeyondPossibleRight(x, possibleSwipeCords.maxX)\n                ) {\n                    x = possibleSwipeCords.maxX;\n                }\n            } else {\n                if (scale > 1) {\n                    if (x < possibleSwipeCords.minX) {\n                        x = possibleSwipeCords.minX;\n                    } else if (x > possibleSwipeCords.maxX) {\n                        x = possibleSwipeCords.maxX;\n                    }\n                }\n            }\n            // @todo fix this\n            if (allowY) {\n                if (this.isBeyondPossibleTop(y, possibleSwipeCords.minY)) {\n                    y = possibleSwipeCords.minY;\n                } else if (\n                    this.isBeyondPossibleBottom(y, possibleSwipeCords.maxY)\n                ) {\n                    y = possibleSwipeCords.maxY;\n                }\n            } else {\n                // If the translate value based on index of beyond the viewport, utilize the available space to prevent image being cut out\n                if (scale > 1) {\n                    //If image goes beyond viewport top, use the minim possible translate value\n                    if (y < possibleSwipeCords.minY) {\n                        y = possibleSwipeCords.minY;\n                    } else if (y > possibleSwipeCords.maxY) {\n                        y = possibleSwipeCords.maxY;\n                    }\n                }\n            }\n        }\n\n        this.setZoomStyles({\n            x: x,\n            y: y,\n            scale,\n        });\n\n        this.left = x;\n        this.top = y;\n\n        if (resetToMax) {\n            const actualSizeScale = this.getCurrentImageActualSizeScale();\n\n            if (scale >= actualSizeScale) {\n                this.setZoomImageSize();\n            }\n        }\n    }\n\n    resetImageTranslate(): void {\n        const $image = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-image')\n            .first();\n        this.imageReset = false;\n        $image.removeClass(\n            'reset-transition reset-transition-y reset-transition-x',\n        );\n        this.core.outer.removeClass('lg-actual-size');\n        $image.css('width', 'auto').css('height', 'auto');\n        setTimeout(() => {\n            $image.removeClass('no-transition');\n        }, 10);\n    }\n\n    setZoomImageSize(): void {\n        const $image = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-image')\n            .first();\n\n        setTimeout(() => {\n            $image.addClass('no-transition');\n            this.imageReset = true;\n        }, 500);\n        setTimeout(() => {\n            const dragAllowedAxises = this.getDragAllowedAxises(this.scale);\n\n            $image\n                .css(\n                    'width',\n                    ($image.get() as HTMLImageElement).naturalWidth + 'px',\n                )\n                .css(\n                    'height',\n                    ($image.get() as HTMLImageElement).naturalHeight + 'px',\n                );\n            this.core.outer.addClass('lg-actual-size');\n            if (dragAllowedAxises.allowX && dragAllowedAxises.allowY) {\n                $image.addClass('reset-transition');\n            } else if (dragAllowedAxises.allowX && !dragAllowedAxises.allowY) {\n                $image.addClass('reset-transition-x');\n            } else if (!dragAllowedAxises.allowX && dragAllowedAxises.allowY) {\n                $image.addClass('reset-transition-y');\n            }\n        }, 550);\n    }\n\n    /**\n     * @desc apply scale3d to image and translate to image wrap\n     * @param {style} X,Y and scale\n     */\n    setZoomStyles(style: { x: number; y: number; scale: number }): void {\n        const $imageWrap = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-img-wrap')\n            .first();\n        const $image = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-image')\n            .first();\n        const $dummyImage = this.core.outer\n            .find('.lg-current .lg-dummy-img')\n            .first();\n        this.scale = style.scale;\n        $image.css(\n            'transform',\n            'scale3d(' + style.scale + ', ' + style.scale + ', 1)',\n        );\n\n        $dummyImage.css(\n            'transform',\n            'scale3d(' + style.scale + ', ' + style.scale + ', 1)',\n        );\n\n        const transform =\n            'translate3d(' + style.x + 'px, ' + style.y + 'px, 0)';\n        $imageWrap.css('transform', transform);\n    }\n\n    /**\n     * @param index - Index of the current slide\n     * @param event - event will be available only if the function is called on clicking/taping the imags\n     */\n    setActualSize(index: number, event?: ZoomTouchEvent): void {\n        const currentItem = this.core.galleryItems[this.core.index];\n        this.resetImageTranslate();\n        setTimeout(() => {\n            // Allow zoom only on image\n            if (\n                !currentItem.src ||\n                this.core.outer.hasClass('lg-first-slide-loading')\n            ) {\n                return;\n            }\n            const scale = this.getCurrentImageActualSizeScale();\n            const prevScale = this.scale;\n            if (this.core.outer.hasClass('lg-zoomed')) {\n                this.scale = 1;\n            } else {\n                this.scale = this.getScale(scale);\n            }\n            this.setPageCords(event);\n\n            this.beginZoom(this.scale);\n            this.zoomImage(this.scale, this.scale - prevScale, true, true);\n\n            setTimeout(() => {\n                this.core.outer.removeClass('lg-grabbing').addClass('lg-grab');\n            }, 10);\n        }, 50);\n    }\n\n    getNaturalWidth(index: number): number {\n        const $image = this.core.getSlideItem(index).find('.lg-image').first();\n\n        const naturalWidth = this.core.galleryItems[index].width;\n        return naturalWidth\n            ? parseFloat(naturalWidth)\n            : undefined || ($image.get() as any).naturalWidth;\n    }\n\n    getActualSizeScale(naturalWidth: number, width: number): number {\n        let _scale;\n        let scale;\n        if (naturalWidth >= width) {\n            _scale = naturalWidth / width;\n            scale = _scale || 2;\n        } else {\n            scale = 1;\n        }\n        return scale;\n    }\n\n    getCurrentImageActualSizeScale(): number {\n        const $image = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-image')\n            .first();\n        const width = $image.get().offsetWidth;\n        const naturalWidth = this.getNaturalWidth(this.core.index) || width;\n        return this.getActualSizeScale(naturalWidth, width);\n    }\n\n    getPageCords(event?: ZoomTouchEvent): Coords {\n        const cords: Coords = {} as Coords;\n        if (event) {\n            cords.x = event.pageX || event.touches[0].pageX;\n            cords.y = event.pageY || event.touches[0].pageY;\n        } else {\n            const containerRect = this.core.$content\n                .get()\n                .getBoundingClientRect();\n            cords.x = containerRect.width / 2 + containerRect.left;\n            cords.y =\n                containerRect.height / 2 + this.scrollTop + containerRect.top;\n        }\n        return cords;\n    }\n\n    setPageCords(event?: ZoomTouchEvent): void {\n        const pageCords = this.getPageCords(event);\n\n        this.pageX = pageCords.x;\n        this.pageY = pageCords.y;\n    }\n\n    manageActualPixelClassNames(): void {\n        const $actualSize = this.core.getElementById('lg-actual-size');\n        $actualSize\n            .removeClass(this.settings.actualSizeIcons.zoomIn)\n            .addClass(this.settings.actualSizeIcons.zoomOut);\n    }\n\n    // If true, zoomed - in else zoomed out\n    beginZoom(scale: number): boolean {\n        this.core.outer.removeClass('lg-zoom-drag-transition lg-zoom-dragging');\n        if (scale > 1) {\n            this.core.outer.addClass('lg-zoomed');\n            this.manageActualPixelClassNames();\n        } else {\n            this.resetZoom();\n        }\n        return scale > 1;\n    }\n\n    getScale(scale: number): number {\n        const actualSizeScale = this.getCurrentImageActualSizeScale();\n        if (scale < 1) {\n            scale = 1;\n        } else if (scale > actualSizeScale) {\n            scale = actualSizeScale;\n        }\n        return scale;\n    }\n\n    init(): void {\n        if (!this.settings.zoom) {\n            return;\n        }\n        this.buildTemplates();\n        this.enableZoomOnSlideItemLoad();\n\n        let tapped: ReturnType<typeof setTimeout> | null = null;\n\n        this.core.outer.on('dblclick.lg', (event) => {\n            if (!this.$LG(event.target).hasClass('lg-image')) {\n                return;\n            }\n            this.setActualSize(this.core.index, event);\n        });\n\n        this.core.outer.on('touchstart.lg', (event) => {\n            const $target = this.$LG(event.target);\n            if (event.touches.length === 1 && $target.hasClass('lg-image')) {\n                if (!tapped) {\n                    tapped = setTimeout(() => {\n                        tapped = null;\n                    }, 300);\n                } else {\n                    clearTimeout(tapped);\n                    tapped = null;\n                    event.preventDefault();\n                    this.setActualSize(this.core.index, event);\n                }\n            }\n        });\n\n        this.core.LGel.on(\n            `${lGEvents.containerResize}.zoom ${lGEvents.rotateRight}.zoom ${lGEvents.rotateLeft}.zoom ${lGEvents.flipHorizontal}.zoom ${lGEvents.flipVertical}.zoom`,\n            () => {\n                if (\n                    !this.core.lgOpened ||\n                    !this.isImageSlide() ||\n                    this.core.touchAction\n                ) {\n                    return;\n                }\n                const _LGel = this.core\n                    .getSlideItem(this.core.index)\n                    .find('.lg-img-wrap')\n                    .first();\n                this.top = 0;\n                this.left = 0;\n                this.setZoomEssentials();\n                this.setZoomSwipeStyles(_LGel, { x: 0, y: 0 });\n                this.positionChanged = true;\n            },\n        );\n        // Update zoom on resize and orientationchange\n        this.$LG(window).on(`scroll.lg.zoom.global${this.core.lgId}`, () => {\n            if (!this.core.lgOpened) return;\n            this.scrollTop = this.$LG(window).scrollTop();\n        });\n\n        this.core.getElementById('lg-zoom-out').on('click.lg', () => {\n            // Allow zoom only on image\n            if (!this.isImageSlide()) {\n                return;\n            }\n\n            let timeout = 0;\n            if (this.imageReset) {\n                this.resetImageTranslate();\n                timeout = 50;\n            }\n            setTimeout(() => {\n                let scale = this.scale - this.settings.scale;\n\n                if (scale < 1) {\n                    scale = 1;\n                }\n                this.beginZoom(scale);\n                this.zoomImage(scale, -this.settings.scale, true, true);\n            }, timeout);\n        });\n\n        this.core.getElementById('lg-zoom-in').on('click.lg', () => {\n            this.zoomIn();\n        });\n\n        this.core.getElementById('lg-actual-size').on('click.lg', () => {\n            this.setActualSize(this.core.index);\n        });\n\n        this.core.LGel.on(`${lGEvents.beforeOpen}.zoom`, () => {\n            this.core.outer.find('.lg-item').removeClass('lg-zoomable');\n        });\n        this.core.LGel.on(`${lGEvents.afterOpen}.zoom`, () => {\n            this.scrollTop = this.$LG(window).scrollTop();\n\n            // Set the initial value center\n            this.pageX = this.core.outer.width() / 2;\n            this.pageY = this.core.outer.height() / 2 + this.scrollTop;\n\n            this.scale = 1;\n        });\n\n        // Reset zoom on slide change\n        this.core.LGel.on(\n            `${lGEvents.afterSlide}.zoom`,\n            (event: CustomEvent) => {\n                const { prevIndex } = event.detail;\n                this.scale = 1;\n                this.positionChanged = false;\n                this.resetZoom(prevIndex);\n                if (this.isImageSlide()) {\n                    this.setZoomEssentials();\n                }\n            },\n        );\n\n        // Drag option after zoom\n        this.zoomDrag();\n\n        this.pinchZoom();\n\n        this.zoomSwipe();\n\n        // Store the zoomable timeout value just to clear it while closing\n        this.zoomableTimeout = false;\n        this.positionChanged = false;\n    }\n\n    zoomIn(): void {\n        // Allow zoom only on image\n        if (!this.isImageSlide()) {\n            return;\n        }\n\n        let scale = this.scale + this.settings.scale;\n\n        scale = this.getScale(scale);\n        this.beginZoom(scale);\n        this.zoomImage(scale, this.settings.scale, true, true);\n    }\n\n    // Reset zoom effect\n    resetZoom(index?: number): void {\n        this.core.outer.removeClass('lg-zoomed lg-zoom-drag-transition');\n        const $actualSize = this.core.getElementById('lg-actual-size');\n        const $item = this.core.getSlideItem(\n            index !== undefined ? index : this.core.index,\n        );\n        $actualSize\n            .removeClass(this.settings.actualSizeIcons.zoomOut)\n            .addClass(this.settings.actualSizeIcons.zoomIn);\n        $item.find('.lg-img-wrap').first().removeAttr('style');\n        $item.find('.lg-image').first().removeAttr('style');\n        this.scale = 1;\n        this.left = 0;\n        this.top = 0;\n\n        // Reset pagx pagy values to center\n        this.setPageCords();\n    }\n\n    getTouchDistance(e: TouchEvent): number {\n        return Math.sqrt(\n            (e.touches[0].pageX - e.touches[1].pageX) *\n                (e.touches[0].pageX - e.touches[1].pageX) +\n                (e.touches[0].pageY - e.touches[1].pageY) *\n                    (e.touches[0].pageY - e.touches[1].pageY),\n        );\n    }\n\n    pinchZoom(): void {\n        let startDist = 0;\n        let pinchStarted = false;\n        let initScale = 1;\n        let prevScale = 0;\n\n        let $item = this.core.getSlideItem(this.core.index);\n\n        this.core.outer.on('touchstart.lg', (e) => {\n            $item = this.core.getSlideItem(this.core.index);\n            if (!this.isImageSlide()) {\n                return;\n            }\n            if (e.touches.length === 2) {\n                e.preventDefault();\n                if (this.core.outer.hasClass('lg-first-slide-loading')) {\n                    return;\n                }\n                initScale = this.scale || 1;\n                this.core.outer.removeClass(\n                    'lg-zoom-drag-transition lg-zoom-dragging',\n                );\n\n                this.setPageCords(e);\n                this.resetImageTranslate();\n\n                this.core.touchAction = 'pinch';\n\n                startDist = this.getTouchDistance(e);\n            }\n        });\n\n        this.core.$inner.on('touchmove.lg', (e) => {\n            if (\n                e.touches.length === 2 &&\n                this.core.touchAction === 'pinch' &&\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target))\n            ) {\n                e.preventDefault();\n                const endDist = this.getTouchDistance(e);\n\n                const distance = startDist - endDist;\n                if (!pinchStarted && Math.abs(distance) > 5) {\n                    pinchStarted = true;\n                }\n                if (pinchStarted) {\n                    prevScale = this.scale;\n                    const _scale = Math.max(1, initScale + -distance * 0.02);\n                    this.scale =\n                        Math.round((_scale + Number.EPSILON) * 100) / 100;\n                    const diff = this.scale - prevScale;\n                    this.zoomImage(\n                        this.scale,\n                        Math.round((diff + Number.EPSILON) * 100) / 100,\n                        false,\n                        false,\n                    );\n                }\n            }\n        });\n\n        this.core.$inner.on('touchend.lg', (e) => {\n            if (\n                this.core.touchAction === 'pinch' &&\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target))\n            ) {\n                pinchStarted = false;\n                startDist = 0;\n                if (this.scale <= 1) {\n                    this.resetZoom();\n                } else {\n                    const actualSizeScale = this.getCurrentImageActualSizeScale();\n\n                    if (this.scale >= actualSizeScale) {\n                        let scaleDiff = actualSizeScale - this.scale;\n                        if (scaleDiff === 0) {\n                            scaleDiff = 0.01;\n                        }\n                        this.zoomImage(actualSizeScale, scaleDiff, false, true);\n                    }\n                    this.manageActualPixelClassNames();\n\n                    this.core.outer.addClass('lg-zoomed');\n                }\n                this.core.touchAction = undefined;\n            }\n        });\n    }\n\n    touchendZoom(\n        startCoords: Coords,\n        endCoords: Coords,\n        allowX: boolean,\n        allowY: boolean,\n        touchDuration: number,\n    ): void {\n        let distanceXnew = endCoords.x - startCoords.x;\n        let distanceYnew = endCoords.y - startCoords.y;\n\n        let speedX = Math.abs(distanceXnew) / touchDuration + 1;\n        let speedY = Math.abs(distanceYnew) / touchDuration + 1;\n\n        if (speedX > 2) {\n            speedX += 1;\n        }\n\n        if (speedY > 2) {\n            speedY += 1;\n        }\n\n        distanceXnew = distanceXnew * speedX;\n        distanceYnew = distanceYnew * speedY;\n\n        const _LGel = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-img-wrap')\n            .first();\n        const distance: Coords = {} as Coords;\n\n        distance.x = this.left + distanceXnew;\n        distance.y = this.top + distanceYnew;\n\n        const possibleSwipeCords = this.getPossibleSwipeDragCords();\n\n        if (Math.abs(distanceXnew) > 15 || Math.abs(distanceYnew) > 15) {\n            if (allowY) {\n                if (\n                    this.isBeyondPossibleTop(\n                        distance.y,\n                        possibleSwipeCords.minY,\n                    )\n                ) {\n                    distance.y = possibleSwipeCords.minY;\n                } else if (\n                    this.isBeyondPossibleBottom(\n                        distance.y,\n                        possibleSwipeCords.maxY,\n                    )\n                ) {\n                    distance.y = possibleSwipeCords.maxY;\n                }\n            }\n\n            if (allowX) {\n                if (\n                    this.isBeyondPossibleLeft(\n                        distance.x,\n                        possibleSwipeCords.minX,\n                    )\n                ) {\n                    distance.x = possibleSwipeCords.minX;\n                } else if (\n                    this.isBeyondPossibleRight(\n                        distance.x,\n                        possibleSwipeCords.maxX,\n                    )\n                ) {\n                    distance.x = possibleSwipeCords.maxX;\n                }\n            }\n\n            if (allowY) {\n                this.top = distance.y;\n            } else {\n                distance.y = this.top;\n            }\n\n            if (allowX) {\n                this.left = distance.x;\n            } else {\n                distance.x = this.left;\n            }\n\n            this.setZoomSwipeStyles(_LGel, distance);\n\n            this.positionChanged = true;\n        }\n    }\n\n    getZoomSwipeCords(\n        startCoords: Coords,\n        endCoords: Coords,\n        allowX: boolean,\n        allowY: boolean,\n        possibleSwipeCords: PossibleCords,\n    ): Coords {\n        const distance: Coords = {} as Coords;\n        if (allowY) {\n            distance.y = this.top + (endCoords.y - startCoords.y);\n            if (this.isBeyondPossibleTop(distance.y, possibleSwipeCords.minY)) {\n                const diffMinY = possibleSwipeCords.minY - distance.y;\n                distance.y = possibleSwipeCords.minY - diffMinY / 6;\n            } else if (\n                this.isBeyondPossibleBottom(distance.y, possibleSwipeCords.maxY)\n            ) {\n                const diffMaxY = distance.y - possibleSwipeCords.maxY;\n                distance.y = possibleSwipeCords.maxY + diffMaxY / 6;\n            }\n        } else {\n            distance.y = this.top;\n        }\n\n        if (allowX) {\n            distance.x = this.left + (endCoords.x - startCoords.x);\n            if (\n                this.isBeyondPossibleLeft(distance.x, possibleSwipeCords.minX)\n            ) {\n                const diffMinX = possibleSwipeCords.minX - distance.x;\n                distance.x = possibleSwipeCords.minX - diffMinX / 6;\n            } else if (\n                this.isBeyondPossibleRight(distance.x, possibleSwipeCords.maxX)\n            ) {\n                const difMaxX = distance.x - possibleSwipeCords.maxX;\n                distance.x = possibleSwipeCords.maxX + difMaxX / 6;\n            }\n        } else {\n            distance.x = this.left;\n        }\n\n        return distance;\n    }\n\n    private isBeyondPossibleLeft(x: number, minX: number) {\n        return x >= minX;\n    }\n    private isBeyondPossibleRight(x: number, maxX: number) {\n        return x <= maxX;\n    }\n    private isBeyondPossibleTop(y: number, minY: number) {\n        return y >= minY;\n    }\n    private isBeyondPossibleBottom(y: number, maxY: number) {\n        return y <= maxY;\n    }\n\n    isImageSlide(): boolean {\n        const currentItem = this.core.galleryItems[this.core.index];\n        return this.core.getSlideType(currentItem) === 'image';\n    }\n\n    getPossibleSwipeDragCords(scale?: number): PossibleCords {\n        const $image = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-image')\n            .first();\n\n        const { bottom } = this.core.mediaContainerPosition;\n\n        const imgRect = $image.get().getBoundingClientRect();\n\n        let imageHeight = imgRect.height;\n        let imageWidth = imgRect.width;\n\n        if (scale) {\n            imageHeight = imageHeight + scale * imageHeight;\n            imageWidth = imageWidth + scale * imageWidth;\n        }\n\n        const minY = (imageHeight - this.containerRect.height) / 2;\n        const maxY = (this.containerRect.height - imageHeight) / 2 + bottom;\n\n        const minX = (imageWidth - this.containerRect.width) / 2;\n\n        const maxX = (this.containerRect.width - imageWidth) / 2;\n\n        const possibleSwipeCords = {\n            minY: minY,\n            maxY: maxY,\n            minX: minX,\n            maxX: maxX,\n        };\n        return possibleSwipeCords;\n    }\n\n    setZoomSwipeStyles(\n        LGel: lgQuery,\n        distance: { x: number; y: number },\n    ): void {\n        LGel.css(\n            'transform',\n            'translate3d(' + distance.x + 'px, ' + distance.y + 'px, 0)',\n        );\n    }\n\n    zoomSwipe(): void {\n        let startCoords = {} as Coords;\n        let endCoords = {} as Coords;\n        let isMoved = false;\n\n        // Allow x direction drag\n        let allowX = false;\n\n        // Allow Y direction drag\n        let allowY = false;\n\n        let startTime: Date = new Date();\n        let endTime: Date = new Date();\n        let possibleSwipeCords: PossibleCords;\n\n        let _LGel: lgQuery;\n\n        let $item = this.core.getSlideItem(this.core.index);\n\n        this.core.$inner.on('touchstart.lg', (e) => {\n            // Allow zoom only on image\n            if (!this.isImageSlide()) {\n                return;\n            }\n            $item = this.core.getSlideItem(this.core.index);\n            if (\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target)) &&\n                e.touches.length === 1 &&\n                this.core.outer.hasClass('lg-zoomed')\n            ) {\n                e.preventDefault();\n                startTime = new Date();\n                this.core.touchAction = 'zoomSwipe';\n                _LGel = this.core\n                    .getSlideItem(this.core.index)\n                    .find('.lg-img-wrap')\n                    .first();\n\n                const dragAllowedAxises = this.getDragAllowedAxises(0);\n\n                allowY = dragAllowedAxises.allowY;\n                allowX = dragAllowedAxises.allowX;\n                if (allowX || allowY) {\n                    startCoords = this.getSwipeCords(e);\n                }\n\n                possibleSwipeCords = this.getPossibleSwipeDragCords();\n\n                // reset opacity and transition duration\n                this.core.outer.addClass(\n                    'lg-zoom-dragging lg-zoom-drag-transition',\n                );\n            }\n        });\n\n        this.core.$inner.on('touchmove.lg', (e) => {\n            if (\n                e.touches.length === 1 &&\n                this.core.touchAction === 'zoomSwipe' &&\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target))\n            ) {\n                e.preventDefault();\n                this.core.touchAction = 'zoomSwipe';\n\n                endCoords = this.getSwipeCords(e);\n\n                const distance = this.getZoomSwipeCords(\n                    startCoords,\n                    endCoords,\n                    allowX,\n                    allowY,\n                    possibleSwipeCords,\n                );\n\n                if (\n                    Math.abs(endCoords.x - startCoords.x) > 15 ||\n                    Math.abs(endCoords.y - startCoords.y) > 15\n                ) {\n                    isMoved = true;\n                    this.setZoomSwipeStyles(_LGel, distance);\n                }\n            }\n        });\n\n        this.core.$inner.on('touchend.lg', (e) => {\n            if (\n                this.core.touchAction === 'zoomSwipe' &&\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target))\n            ) {\n                e.preventDefault();\n                this.core.touchAction = undefined;\n                this.core.outer.removeClass('lg-zoom-dragging');\n                if (!isMoved) {\n                    return;\n                }\n                isMoved = false;\n                endTime = new Date();\n                const touchDuration = endTime.valueOf() - startTime.valueOf();\n                this.touchendZoom(\n                    startCoords,\n                    endCoords,\n                    allowX,\n                    allowY,\n                    touchDuration,\n                );\n            }\n        });\n    }\n\n    zoomDrag(): void {\n        let startCoords: Coords = {} as Coords;\n        let endCoords: Coords = {} as Coords;\n        let isDragging = false;\n        let isMoved = false;\n\n        // Allow x direction drag\n        let allowX = false;\n\n        // Allow Y direction drag\n        let allowY = false;\n\n        let startTime: number | Date;\n        let endTime;\n\n        let possibleSwipeCords: PossibleCords;\n\n        let _LGel: lgQuery;\n\n        this.core.outer.on('mousedown.lg.zoom', (e) => {\n            // Allow zoom only on image\n            if (!this.isImageSlide()) {\n                return;\n            }\n            const $item = this.core.getSlideItem(this.core.index);\n            if (\n                this.$LG(e.target).hasClass('lg-item') ||\n                $item.get().contains(e.target)\n            ) {\n                startTime = new Date();\n                _LGel = this.core\n                    .getSlideItem(this.core.index)\n                    .find('.lg-img-wrap')\n                    .first();\n\n                const dragAllowedAxises = this.getDragAllowedAxises(0);\n\n                allowY = dragAllowedAxises.allowY;\n                allowX = dragAllowedAxises.allowX;\n\n                if (this.core.outer.hasClass('lg-zoomed')) {\n                    if (\n                        this.$LG(e.target).hasClass('lg-object') &&\n                        (allowX || allowY)\n                    ) {\n                        e.preventDefault();\n                        startCoords = this.getDragCords(e);\n\n                        possibleSwipeCords = this.getPossibleSwipeDragCords();\n\n                        isDragging = true;\n\n                        this.core.outer\n                            .removeClass('lg-grab')\n                            .addClass(\n                                'lg-grabbing lg-zoom-drag-transition lg-zoom-dragging',\n                            );\n                        // reset opacity and transition duration\n                    }\n                }\n            }\n        });\n\n        this.$LG(window).on(\n            `mousemove.lg.zoom.global${this.core.lgId}`,\n            (e) => {\n                if (isDragging) {\n                    isMoved = true;\n                    endCoords = this.getDragCords(e);\n\n                    const distance = this.getZoomSwipeCords(\n                        startCoords,\n                        endCoords,\n                        allowX,\n                        allowY,\n                        possibleSwipeCords,\n                    );\n\n                    this.setZoomSwipeStyles(_LGel, distance);\n                }\n            },\n        );\n\n        this.$LG(window).on(`mouseup.lg.zoom.global${this.core.lgId}`, (e) => {\n            if (isDragging) {\n                endTime = new Date();\n                isDragging = false;\n                this.core.outer.removeClass('lg-zoom-dragging');\n\n                // Fix for chrome mouse move on click\n                if (\n                    isMoved &&\n                    (startCoords.x !== endCoords.x ||\n                        startCoords.y !== endCoords.y)\n                ) {\n                    endCoords = this.getDragCords(e);\n\n                    const touchDuration =\n                        endTime.valueOf() - startTime.valueOf();\n                    this.touchendZoom(\n                        startCoords,\n                        endCoords,\n                        allowX,\n                        allowY,\n                        touchDuration,\n                    );\n                }\n\n                isMoved = false;\n            }\n\n            this.core.outer.removeClass('lg-grabbing').addClass('lg-grab');\n        });\n    }\n\n    closeGallery(): void {\n        this.resetZoom();\n    }\n\n    destroy(): void {\n        // Unbind all events added by lightGallery zoom plugin\n        this.$LG(window).off(`.lg.zoom.global${this.core.lgId}`);\n        this.core.LGel.off('.lg.zoom');\n        this.core.LGel.off('.zoom');\n        clearTimeout(this.zoomableTimeout);\n        this.zoomableTimeout = false;\n    }\n}\n","export interface ActualSizeIcons {\n    zoomIn: 'lg-zoom-in' | 'lg-actual-size';\n    zoomOut: 'lg-zoom-out' | 'lg-actual-size';\n}\n\nexport interface ZoomStrings {\n    zoomIn: string;\n    zoomOut: string;\n    viewActualSize: string;\n}\n\nexport interface ZoomSettings {\n    /**\n     * Value of zoom should be incremented/decremented\n     */\n    scale: number;\n\n    /**\n     * Enable/Disable zoom option\n     */\n    zoom: boolean;\n\n    /**\n     * Enable actual size icon.\n     */\n    actualSize: boolean;\n\n    /**\n     * Once the slide transition is completed, how much time should take zoom plugin to activate\n     * @description Some css styles will be added to the images if zoom is enabled.\n     * So it might conflict if you add any custom styles to the images such as the initial transition while opening the gallery.\n     * So you can delay adding zoom related styles to the images by changing the value of enableZoomAfter.\n     */\n    enableZoomAfter: number;\n\n    /**\n     * Show zoom in, zoom out icons\n     */\n    showZoomInOutIcons: boolean;\n\n    /**\n     * Actual size icons classnames.\n     * Specify classnames for both ZoomIn and ZoomOut states\n     * You can use `actualSizeIcons: { zoomIn: 'lg-actual-size', zoomOut: 'lg-zoom-out' }`\n     * to show actual size icons instead of zoom in and zoom out icons.\n     */\n    actualSizeIcons: ActualSizeIcons;\n\n    /**\n     * Custom translation strings for aria-labels\n     */\n    zoomPluginStrings: ZoomStrings;\n}\n\nexport const zoomSettings: ZoomSettings = {\n    scale: 1,\n    zoom: true,\n    actualSize: true,\n    showZoomInOutIcons: false,\n    actualSizeIcons: {\n        zoomIn: 'lg-zoom-in',\n        zoomOut: 'lg-zoom-out',\n    } as ActualSizeIcons,\n    enableZoomAfter: 300,\n    zoomPluginStrings: {\n        zoomIn: 'Zoom in',\n        zoomOut: 'Zoom out',\n        viewActualSize: 'View actual size',\n    } as ZoomStrings,\n};\n","import { LightGallery } from './lightgallery';\nimport { VideoSource } from './plugins/video/types';\n\n/**\n * List of lightGallery events\n * All events should be documented here\n * Below interfaces are used to build the website documentations\n * */\nexport const lGEvents: {\n    [key: string]: string;\n} = {\n    afterAppendSlide: 'lgAfterAppendSlide',\n    init: 'lgInit',\n    hasVideo: 'lgHasVideo',\n    containerResize: 'lgContainerResize',\n    updateSlides: 'lgUpdateSlides',\n    afterAppendSubHtml: 'lgAfterAppendSubHtml',\n    beforeOpen: 'lgBeforeOpen',\n    afterOpen: 'lgAfterOpen',\n    slideItemLoad: 'lgSlideItemLoad',\n    beforeSlide: 'lgBeforeSlide',\n    afterSlide: 'lgAfterSlide',\n    posterClick: 'lgPosterClick',\n    dragStart: 'lgDragStart',\n    dragMove: 'lgDragMove',\n    dragEnd: 'lgDragEnd',\n    beforeNextSlide: 'lgBeforeNextSlide',\n    beforePrevSlide: 'lgBeforePrevSlide',\n    beforeClose: 'lgBeforeClose',\n    afterClose: 'lgAfterClose',\n    rotateLeft: 'lgRotateLeft',\n    rotateRight: 'lgRotateRight',\n    flipHorizontal: 'lgFlipHorizontal',\n    flipVertical: 'lgFlipVertical',\n    autoplay: 'lgAutoplay',\n    autoplayStart: 'lgAutoplayStart',\n    autoplayStop: 'lgAutoplayStop',\n};\n\n// Follow the below format for the event documentation\n// @method is the method name when event is used with Angular/React components\n\n/**\n * Fired only once when lightGallery is initialized\n * @name lgInit\n * @method onInit\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action on lightGallery initialization.\n *   // Init event returns the plugin instance that can be used to call any lightGalley public method\n *   let pluginInstance = null;\n *   lg.addEventListener('lgInit', (event) => {\n *      pluginInstance = event.detail.instance;\n *   });\n *   lightGallery(lg);\n * @see <a href=\"/docs/methods\">Methods<a>\n */\nexport interface InitDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired when the slide content has been inserted into it's slide container.\n * @name lgAfterAppendSlide\n * @method onAfterAppendSlide\n */\nexport interface AfterAppendSlideEventDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired immediately before opening the gallery\n * @name lgBeforeOpen\n * @method onBeforeOpen\n */\nexport interface BeforeOpenDetail {}\n\n/**\n * Fired immediately after opening the gallery\n * @name lgAfterOpen\n * @method onAfterOpen\n */\nexport interface AfterOpenDetail {}\n\n/**\n * Fired once the media inside the slide has been completely loaded .\n * @name lgSlideItemLoad\n * @method onSlideItemLoad\n */\nexport interface SlideItemLoadDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * For the first slide, lightGallery adds some delay for displaying the loaded slide item.\n     * This delay is required for the transition effect when the slide item is displayed\n     * Respect the delay when you use this event\n     */\n    delay: number;\n\n    // Will be true for the first slide\n    isFirstSlide: boolean;\n}\n\n/**\n * Fired immediately before each slide transition.\n * @name lgBeforeSlide\n * @method onBeforeSlide\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action before each slide transition\n *   lg.addEventListener('lgBeforeSlide', (event) => {\n *       const { index, prevIndex } = event.detail;\n *       alert(index, prevIndex);\n *   });\n *   lightGallery(lg);\n */\nexport interface BeforeSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired immediately after each slide transition.\n * @name lgAfterSlide\n * @method onAfterSlide\n */\nexport interface AfterSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired when the video poster is clicked.\n * @name lgPosterClick\n * @method onPosterClick\n */\nexport interface PosterClickDetail {}\n\n/**\n * Fired when the drag event to move to different slide starts.\n * @name lgDragStart\n * @method onDragStart\n */\nexport interface DragStartDetail {}\n\n/**\n * Fired periodically during the drag operation.\n * @name lgDragMove\n * @method onDragMove\n */\nexport interface DragMoveDetail {}\n\n/**\n * Fired when the user has finished the drag operation\n * @name lgDragEnd\n * @method onDragEnd\n */\nexport interface DragEndDetail {}\n\n/**\n * Fired immediately before the start of the close process.\n * @name lgBeforeClose\n * @method onBeforeClose\n */\nexport interface BeforeCloseDetail {}\n\n/**\n * Fired immediately once lightGallery is closed.\n * @name lgAfterClose\n * @method onAfterClose\n */\nexport interface AfterCloseDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired immediately before each \"next\" slide transition\n * @name lgBeforeNextSlide\n * @method onBeforeNextSlide\n */\nexport interface BeforeNextSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired immediately before each \"prev\" slide transition\n * @name lgBeforePrevSlide\n * @method onBeforePrevSlide\n */\nexport interface BeforePrevSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired when the sub-html content (ex : title/ description) has been appended into the slide.\n * @name lgAfterAppendSubHtml\n * @method onAfterAppendSubHtml\n */\nexport interface AfterAppendSubHtmlDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the lightGallery container has been resized.\n * @name lgContainerResize\n * @method onContainerResize\n */\nexport interface ContainerResizeDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when lightGallery detects video slide\n * @name lgHasVideo\n * @method onHasVideo\n */\nexport interface HasVideoDetail {\n    /**\n     * Index of the slide,\n     */\n    index: number;\n    /**\n     * Video source\n     */\n    src: string;\n    /**\n     * HTML5 video source if available\n     * <p>\n       HTML5 video source = source: {\n            src: string;\n            type: string;\n        }[];\n        attributes: HTMLVideoElement;\n     * </p>\n     */\n    html5Video: VideoSource;\n    /**\n     * True if video has poster\n     */\n    hasPoster: boolean;\n}\n\n/**\n * Fired when the image is rotated in anticlockwise direction\n * @name lgRotateLeft\n * @method onRotateLeft\n */\nexport interface RotateLeftDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is rotated in clockwise direction\n * @name lgRotateRight\n * @method onRotateRight\n */\nexport interface RotateRightDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is flipped horizontally\n * @name lgFlipHorizontal\n * @method onFlipHorizontal\n */\nexport interface FlipHorizontalDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is flipped vertically\n * @name lgFlipVertical\n * @method onFlipVertical\n */\nexport interface FlipVerticalDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n"]}