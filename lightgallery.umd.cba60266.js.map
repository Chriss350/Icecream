{"version":3,"sources":["../src/index.ts","../src/lg-events.ts","../src/lg-settings.ts","../src/lgQuery.ts","../src/lg-utils.ts","../src/lightgallery.ts"],"names":[],"mappings":"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","file":"lightgallery.umd.cba60266.js","sourceRoot":"../src","sourcesContent":["import { LightGallerySettings } from './lg-settings';\nimport { LightGallery } from './lightgallery';\n\nfunction lightGallery(\n    el: HTMLElement,\n    options?: LightGallerySettings,\n): LightGallery {\n    return new LightGallery(el, options);\n}\nexport default lightGallery;\n","import { LightGallery } from './lightgallery';\nimport { VideoSource } from './plugins/video/types';\n\n/**\n * List of lightGallery events\n * All events should be documented here\n * Below interfaces are used to build the website documentations\n * */\nexport const lGEvents: {\n    [key: string]: string;\n} = {\n    afterAppendSlide: 'lgAfterAppendSlide',\n    init: 'lgInit',\n    hasVideo: 'lgHasVideo',\n    containerResize: 'lgContainerResize',\n    updateSlides: 'lgUpdateSlides',\n    afterAppendSubHtml: 'lgAfterAppendSubHtml',\n    beforeOpen: 'lgBeforeOpen',\n    afterOpen: 'lgAfterOpen',\n    slideItemLoad: 'lgSlideItemLoad',\n    beforeSlide: 'lgBeforeSlide',\n    afterSlide: 'lgAfterSlide',\n    posterClick: 'lgPosterClick',\n    dragStart: 'lgDragStart',\n    dragMove: 'lgDragMove',\n    dragEnd: 'lgDragEnd',\n    beforeNextSlide: 'lgBeforeNextSlide',\n    beforePrevSlide: 'lgBeforePrevSlide',\n    beforeClose: 'lgBeforeClose',\n    afterClose: 'lgAfterClose',\n    rotateLeft: 'lgRotateLeft',\n    rotateRight: 'lgRotateRight',\n    flipHorizontal: 'lgFlipHorizontal',\n    flipVertical: 'lgFlipVertical',\n    autoplay: 'lgAutoplay',\n    autoplayStart: 'lgAutoplayStart',\n    autoplayStop: 'lgAutoplayStop',\n};\n\n// Follow the below format for the event documentation\n// @method is the method name when event is used with Angular/React components\n\n/**\n * Fired only once when lightGallery is initialized\n * @name lgInit\n * @method onInit\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action on lightGallery initialization.\n *   // Init event returns the plugin instance that can be used to call any lightGalley public method\n *   let pluginInstance = null;\n *   lg.addEventListener('lgInit', (event) => {\n *      pluginInstance = event.detail.instance;\n *   });\n *   lightGallery(lg);\n * @see <a href=\"/docs/methods\">Methods<a>\n */\nexport interface InitDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired when the slide content has been inserted into it's slide container.\n * @name lgAfterAppendSlide\n * @method onAfterAppendSlide\n */\nexport interface AfterAppendSlideEventDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired immediately before opening the gallery\n * @name lgBeforeOpen\n * @method onBeforeOpen\n */\nexport interface BeforeOpenDetail {}\n\n/**\n * Fired immediately after opening the gallery\n * @name lgAfterOpen\n * @method onAfterOpen\n */\nexport interface AfterOpenDetail {}\n\n/**\n * Fired once the media inside the slide has been completely loaded .\n * @name lgSlideItemLoad\n * @method onSlideItemLoad\n */\nexport interface SlideItemLoadDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * For the first slide, lightGallery adds some delay for displaying the loaded slide item.\n     * This delay is required for the transition effect when the slide item is displayed\n     * Respect the delay when you use this event\n     */\n    delay: number;\n\n    // Will be true for the first slide\n    isFirstSlide: boolean;\n}\n\n/**\n * Fired immediately before each slide transition.\n * @name lgBeforeSlide\n * @method onBeforeSlide\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action before each slide transition\n *   lg.addEventListener('lgBeforeSlide', (event) => {\n *       const { index, prevIndex } = event.detail;\n *       alert(index, prevIndex);\n *   });\n *   lightGallery(lg);\n */\nexport interface BeforeSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired immediately after each slide transition.\n * @name lgAfterSlide\n * @method onAfterSlide\n */\nexport interface AfterSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired when the video poster is clicked.\n * @name lgPosterClick\n * @method onPosterClick\n */\nexport interface PosterClickDetail {}\n\n/**\n * Fired when the drag event to move to different slide starts.\n * @name lgDragStart\n * @method onDragStart\n */\nexport interface DragStartDetail {}\n\n/**\n * Fired periodically during the drag operation.\n * @name lgDragMove\n * @method onDragMove\n */\nexport interface DragMoveDetail {}\n\n/**\n * Fired when the user has finished the drag operation\n * @name lgDragEnd\n * @method onDragEnd\n */\nexport interface DragEndDetail {}\n\n/**\n * Fired immediately before the start of the close process.\n * @name lgBeforeClose\n * @method onBeforeClose\n */\nexport interface BeforeCloseDetail {}\n\n/**\n * Fired immediately once lightGallery is closed.\n * @name lgAfterClose\n * @method onAfterClose\n */\nexport interface AfterCloseDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired immediately before each \"next\" slide transition\n * @name lgBeforeNextSlide\n * @method onBeforeNextSlide\n */\nexport interface BeforeNextSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired immediately before each \"prev\" slide transition\n * @name lgBeforePrevSlide\n * @method onBeforePrevSlide\n */\nexport interface BeforePrevSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired when the sub-html content (ex : title/ description) has been appended into the slide.\n * @name lgAfterAppendSubHtml\n * @method onAfterAppendSubHtml\n */\nexport interface AfterAppendSubHtmlDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the lightGallery container has been resized.\n * @name lgContainerResize\n * @method onContainerResize\n */\nexport interface ContainerResizeDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when lightGallery detects video slide\n * @name lgHasVideo\n * @method onHasVideo\n */\nexport interface HasVideoDetail {\n    /**\n     * Index of the slide,\n     */\n    index: number;\n    /**\n     * Video source\n     */\n    src: string;\n    /**\n     * HTML5 video source if available\n     * <p>\n       HTML5 video source = source: {\n            src: string;\n            type: string;\n        }[];\n        attributes: HTMLVideoElement;\n     * </p>\n     */\n    html5Video: VideoSource;\n    /**\n     * True if video has poster\n     */\n    hasPoster: boolean;\n}\n\n/**\n * Fired when the image is rotated in anticlockwise direction\n * @name lgRotateLeft\n * @method onRotateLeft\n */\nexport interface RotateLeftDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is rotated in clockwise direction\n * @name lgRotateRight\n * @method onRotateRight\n */\nexport interface RotateRightDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is flipped horizontally\n * @name lgFlipHorizontal\n * @method onFlipHorizontal\n */\nexport interface FlipHorizontalDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is flipped vertically\n * @name lgFlipVertical\n * @method onFlipVertical\n */\nexport interface FlipVerticalDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n","import { GalleryItem } from './lg-utils';\nimport { LgQuery } from './lgQuery';\nimport { LightGallery } from './lightgallery';\nimport { AutoplaySettings } from './plugins/autoplay/lg-autoplay-settings';\nimport { CommentSettings } from './plugins/comment/lg-comment-settings';\nimport { FullscreenSettings } from './plugins/fullscreen/lg-fullscreen-settings';\nimport { HashSettings } from './plugins/hash/lg-hash-settings';\nimport { PagerSettings } from './plugins/pager/lg-pager-settings';\nimport { RotateSettings } from './plugins/rotate/lg-rotate-settings';\nimport { ShareSettings } from './plugins/share/lg-share-settings';\nimport { ThumbnailsSettings } from './plugins/thumbnail/lg-thumbnail-settings';\nimport { VideoSettings } from './plugins/video/lg-video-settings';\nimport { ZoomSettings } from './plugins/zoom/lg-zoom-settings';\n\ntype LightGalleryCoreMobileSettings = Exclude<\n    LightGalleryCoreSettings,\n    'mobileSettings'\n>;\n\n// @todo use separate mobile settings for plugins\nexport interface MobileSettings\n    extends LightGalleryCoreMobileSettings,\n        Partial<ZoomSettings>,\n        Partial<ThumbnailsSettings>,\n        Partial<VideoSettings>,\n        Partial<AutoplaySettings>,\n        Partial<CommentSettings>,\n        Partial<FullscreenSettings>,\n        Partial<HashSettings>,\n        Partial<PagerSettings>,\n        Partial<RotateSettings>,\n        Partial<ShareSettings> {}\n\nexport interface LightGalleryCoreStrings {\n    closeGallery: string;\n    toggleMaximize: string;\n    previousSlide: string;\n    nextSlide: string;\n    download: string;\n    playVideo: string;\n}\n\nexport type LightGalleryAllSettings = LightGalleryCoreSettings &\n    ZoomSettings &\n    ThumbnailsSettings &\n    VideoSettings &\n    AutoplaySettings &\n    CommentSettings &\n    FullscreenSettings &\n    HashSettings &\n    PagerSettings &\n    RotateSettings &\n    ShareSettings;\n\nexport type LightGallerySettings = Partial<LightGalleryAllSettings>;\n\nexport interface LightGalleryCoreSettings {\n    /**\n     * Type of transition between images.\n     */\n    mode:\n        | 'lg-slide'\n        | 'lg-fade'\n        | 'lg-zoom-in'\n        | 'lg-zoom-in-big'\n        | 'lg-zoom-out'\n        | 'lg-zoom-out-big'\n        | 'lg-zoom-out-in'\n        | 'lg-zoom-in-out'\n        | 'lg-soft-zoom'\n        | 'lg-scale-up'\n        | 'lg-slide-circular'\n        | 'lg-slide-circular-vertical'\n        | 'lg-slide-vertical'\n        | 'lg-slide-vertical-growth'\n        | 'lg-slide-skew-only'\n        | 'lg-slide-skew-only-rev'\n        | 'lg-slide-skew-only-y'\n        | 'lg-slide-skew-only-y-rev'\n        | 'lg-slide-skew'\n        | 'lg-slide-skew-rev'\n        | 'lg-slide-skew-cross'\n        | 'lg-slide-skew-cross-rev'\n        | 'lg-slide-skew-ver'\n        | 'lg-slide-skew-ver-rev'\n        | 'lg-slide-skew-ver-cross'\n        | 'lg-slide-skew-ver-cross-rev'\n        | 'lg-lollipop'\n        | 'lg-lollipop-rev'\n        | 'lg-rotate'\n        | 'lg-rotate-rev'\n        | 'lg-tube';\n\n    /**\n     * Slide animation CSS easing property\n     */\n    easing: string;\n\n    /**\n     *Transition duration (in ms).\n     */\n    speed: number;\n\n    /**\n     * If you are using lightGallery for commercial projects, you need to purchase a commercial license\n     * to get the license key. For projects that are compatible with GPLv3 license,\n     * please contact us for getting a license key at <a href=\"mailto:contact@lightgalleryjs.com\">contact@lightgalleryjs.com</a>.\n     * If you want to test lightGallery before purchasing a commercial license, you can\n     * use `0000-0000-000-0000` as a temporary license key\n     */\n\n    licenseKey: string;\n\n    /**\n     * Height of the gallery.\n     * example '100%' , '300px'\n     */\n    height: string;\n\n    /**\n     * Width of the gallery.\n     * example '100%' , '300px'\n     */\n    width: string;\n\n    /**\n     * Add custom class for gallery container\n     * This can be used to set different style for different galleries\n     */\n    addClass: string;\n\n    /**\n     * Start animation class for the gallery.\n     * @description\n     * <ul>\n     * <li>startClass will be empty zoomFromOrigin is true.</li>\n     * <li>This can be used to change the starting effect when the image is loaded</li>\n     * <li>This is also applied when navigating to new slides</li>\n     * </ul>\n     */\n    startClass: string;\n\n    /**\n     * Enable zoom from origin effect.\n     * @description You need to know the original image size upfront and provide it via data-lg-size attribute as <code> data-lg-size=\"1920-1280</code>\"\n     *\n     * If you don't know, the size of a few images in the list, you can skip the data-lg-size attribute for the particular slides,\n     * lightGallery will show the default animation if data-lg-size is not available\n     *\n     * If you are using responsive images,\n     * you can pass a comma separated list of sizes combined with a max-width (up to what size the particular image should be used)\n     *\n     * example -\n     * <code> data-lg-size=\"240-160-375, 400-267-480, 1600-1067\"\n     * data-responsive=\"img-240.jpg 375, img-400.jpg 480\"\n     * data-src=\"img-1600.jpg\" </code>\n     *\n     * In the above example, upto 375 width img.240.jpg and lg-size 240-160 will be used.\n     * Similarly, upto 480 pixel width size 400-267 and img-400.jpg will be used\n     * And above 480, lg-size 1600-1067 and img-1600.jpg will be used\n     *\n     * <ul>\n     * <li>At the moment, zoomFromOrigin options is supported only for image slides.</li>\n     * <li>Will be false if dynamic option is enabled or galleryID found in the URL.</li>\n     * <li>startClass will be empty if zoomFromOrigin is true to avoid css conflicts.</li>\n     * </ul>\n     */\n    zoomFromOrigin: boolean;\n\n    /**\n     * Zoom from image animation duration\n     */\n    startAnimationDuration: number;\n\n    /**\n     * Backdrop transition duration.\n     * Note - Do not change the value of backdrop via css.\n     */\n    backdropDuration: number;\n\n    /**\n     * Configure where the gallery should be appended.\n     * Useful to create inline galleries and more\n     * It is an empty string in the default settings and later assigned to document.body to avoid accessing document for SSR\n     */\n    container: HTMLElement | '';\n\n    /**\n     * Delay for hiding gallery controls in ms.\n     * Pass <code>0</code> if you don't want to hide the controls\n     */\n    hideBarsDelay: number;\n\n    /**\n     * Delay in hiding controls for the first time when gallery is opened\n     */\n    showBarsAfter: number;\n\n    /**\n     * Delay slide transitions.\n     * @description This is useful if you want to do any action in the current slide before moving to next slide.\n     * <section>\n     * For example, fading out the captions before going to next slide.\n     * <code>.lg-slide-progress</code> class name is added to the current slide immediately after calling the slide method.\n     * But transition begins only after the delay\n     * </section>\n     */\n    slideDelay: number;\n\n    /**\n     * Support legacy browsers\n     * @description Currently this is used only for adding support to srcset attribute via picturefill library\n     * If true lightGallery will show warning message to include picturefill library\n     */\n    supportLegacyBrowser: boolean;\n\n    /**\n     * If true, toolbar, captions and thumbnails will not overlap with media element\n     * This will not effect thumbnails if animateThumb is false\n     * Also, toggle thumbnails button is not displayed if allowMediaOverlap is false\n     * <section>\n     * Note - Changing the position of the media on every slide transition creates a flickering effect.\n     * Therefore, the height of the caption is calculated dynamically, only once based on the first slide caption.\n     * </section>\n     * <section>\n     * if you have dynamic captions for each media,\n     * you can provide an appropriate height for the captions via allowMediaOverlap option\n     * </section>\n     */\n    allowMediaOverlap: boolean;\n\n    /**\n     * Video max size.\n     * @description This can be over-written by passing specific size via data-lg-size attribute\n     * Recommended video resolution and & aspect ratios <a href=\"https://support.google.com/youtube/answer/6375112\">https://support.google.com/youtube/answer/6375112</a>\n     */\n    videoMaxSize: string;\n\n    /**\n     * Automatically load poster image for YouTube videos\n     */\n    loadYouTubePoster: boolean;\n\n    /**\n     * Height of the caption for calculating allowMediaOverlap positions\n     * Note - this is only used to find the position of media item if allowMediaOverlap is true.\n     * Not for setting height of the captions\n     * Set 0 if you want to calculate the height of captions dynamically\n     */\n    defaultCaptionHeight: number;\n\n    /**\n     * aria-labelledby attribute fot gallery\n     */\n    ariaLabelledby: string;\n\n    /**\n     * aria-describedby attribute for gallery\n     */\n    ariaDescribedby: string;\n\n    /**\n     * Hide scrollbar when gallery is opened\n     * @version V2.5.0\n     */\n    hideScrollbar: boolean;\n\n    /**\n     * Reset to previous scrollPosition when lightGallery is closed\n     * @description By default, lightGallery doesn't hide the scrollbar for a smooth opening transition.\n     * If a user changes the scroll position, lightGallery resets it to the previous value\n     * @version V2.5.0\n     */\n    resetScrollPosition: boolean;\n\n    /**\n     * If false user won't be abel to close the gallery at all\n     * This is useful for creating inline galleries.\n     */\n    closable: boolean;\n\n    /**\n     * allows vertical drag/swipe to close gallery\n     * <code>false</code> if option <code>closable</code> is <code>false</code>\n     */\n    swipeToClose: boolean;\n    /**\n     * allows clicks on black area to close gallery.\n     */\n    closeOnTap: boolean;\n\n    /**\n     * If false, close button won't be displayed.\n     * Useful for creating inline galleries.\n     */\n    showCloseIcon: boolean;\n\n    /**\n     * Show maximize icon.\n     * Useful for creating inline galleries.\n     */\n    showMaximizeIcon: boolean;\n\n    /**\n     * If false, will disable the ability to loop back to the beginning of the gallery from the last slide.\n     */\n    loop: boolean;\n\n    /**\n     * Whether the LightGallery could be closed by pressing the \"Esc\" key.\n     */\n    escKey: boolean;\n\n    /**\n     * Enable keyboard navigation\n     */\n    keyPress: boolean;\n\n    /**\n     * Trap focus within the lightGallery\n     * @version V2.5.0\n     */\n    trapFocus: boolean;\n\n    /**\n     * If false, prev/next buttons will not be displayed.\n     */\n    controls: boolean;\n\n    /**\n     * Enable slideEnd animation\n     */\n    slideEndAnimation: boolean;\n\n    /**\n     * If true, prev/next button will be hidden on first/last image.\n     */\n    hideControlOnEnd: boolean;\n\n    /**\n     * ability to navigate to next/prev slides on mousewheel\n     */\n    mousewheel: boolean;\n\n    /**\n     * Option to get captions from alt or title tags.\n     */\n    getCaptionFromTitleOrAlt: boolean;\n\n    /**\n     * control where the sub-html should be appended.\n     * If you choose '.lg-outer', you are responsible for placing the div at the right position.\n     * '.lg-outer' is useful if you want show custom HTML outside the normal gallery\n     */\n    appendSubHtmlTo: '.lg-sub-html' | '.lg-item' | '.lg-outer';\n\n    /**\n     * Set to true if the selector in \"data-sub-html\" should use the current item as its origin.\n     */\n    subHtmlSelectorRelative: boolean;\n\n    /**\n     * number of preload slides\n     * @description will exicute only after the current slide is fully loaded.\n     * for example, if you click on 4th image and if preload = 1 then 3rd slide and 5th\n     * slide will be loaded in the background after the 4th slide is fully loaded..\n     * if preload is 2 then 2nd 3rd 5th 6th slides will be preloaded.\n     */\n    preload: number;\n\n    /**\n     * Control how many slide items should be kept in dom at a time\n     * @description To improve performance by reducing number of gallery items in the dom,\n     * lightGallery keeps only the lowest possible number of slides in the dom at a time.\n     * This has a minimum value of 3\n     */\n    numberOfSlideItemsInDom: number;\n\n    /**\n     * Custom selector property instead of direct children.\n     * @description Based on your markup structure, you can specify custom selectors to fetch media data for the gallery\n     * Pass \"this\" to select same element\n     * You can also pass HTMLCollection directly\n     * Example - '.my-selector' | '#my-selector' | this | document.querySelectorAll('.my-selector')\n     */\n    selector: string | HTMLCollection[];\n\n    /**\n     * By default selector element relative to the current gallery.\n     * Instead of that you can tell lightGallery to select element relative to another element.\n     * Example - '.my-selector-container' | '#my-selector-container'\n     * In the code this become selector =  document.querySelector(this.s.selectWithin ).querySelectorAll(this.s.selector);\n     */\n    selectWithin: string;\n\n    /**\n     * Custom html for next control\n     */\n    nextHtml: string;\n\n    /**\n     * Custom html for prev control\n     */\n    prevHtml: string;\n\n    /**\n     * specify which slide should load initially\n     */\n    index: number;\n\n    /**\n     * Set width for iframe.\n     */\n    iframeWidth: string;\n\n    /**\n     * Set height for iframe.\n     */\n    iframeHeight: string;\n\n    /**\n     * Set max width for iframe.\n     */\n    iframeMaxWidth: string;\n\n    /**\n     * Set max height for iframe.\n     */\n    iframeMaxHeight: string;\n\n    /**\n     * Enable download button.\n     * @description By default download url will be taken from data-src/href attribute but it supports only for modern browsers.\n     * If you want you can provide another url for download via data-download-url.\n     * pass false in data-download-url if you want to hide download button for the particular slide.\n     */\n    download: boolean;\n\n    /**\n     * Whether to show total number of images and index number of currently displayed image.\n     */\n    counter: boolean;\n\n    /**\n     * Where the counter should be appended\n     */\n    appendCounterTo: string;\n\n    /**\n     * By setting the swipeThreshold (in px) you can set how far the user must swipe for the next/prev image.\n     */\n    swipeThreshold: number;\n\n    /**\n     * Enables swipe support for touch devices\n     */\n    enableSwipe: boolean;\n\n    /**\n     * Enables desktop mouse drag support\n     */\n    enableDrag: boolean;\n\n    /**\n     * LightGallery can be instantiated and launched programmatically by setting this option to true and populating dynamicEl option (see below) with the definitions of images.\n     */\n    dynamic: boolean;\n\n    /**\n     * An array of objects (src, iframe, subHtml, thumb, poster, responsive, srcset sizes) representing gallery elements.\n     */\n    dynamicEl: GalleryItem[];\n\n    /**\n     * Fetch custom properties from the selector\n     * @description this is useful for plugin development\n     * By default lightGallery fetches and store all the props selectors to\n     * reduce frequent dom interaction for fetching props every time.\n     *\n     * If you need any addition data to be fetched and stored in the galleryItems variable,\n     * you can do this just by passing the prop names via extraProps\n     * @example\n     * HTML:\n     * <div id=\"lightGallery\">\n     *     <a href=\"a.jpg\" data-custom-prop=\"abc\"><img src=\"thumb.jpg\" /></a>\n     *     <a href=\"a.jpg\" data-custom-prop=\"xyz\"><img src=\"thumb.jpg\" /></a>\n     * </div>\n     * JS:\n     * lightGallery(document.getElementById('lightGallery'), {\n     *     extraProps: ['customProp']\n     * })\n     * // Note - If you are using dynamic mode, you can pass any custom prop in the galleryItem\n     * lightGallery(document.getElementById('lightGallery'), {\n     *     dynamic: true,\n     *     dynamicEl: [{\n     *         src: 'img/img1.jpg',\n     *         customProp:'abc',\n     *     }]\n     * })\n     *\n     */\n    extraProps: string[];\n\n    /**\n     * Option to fetch different thumbnail image other than first image\n     * @description If you want to use external image for thumbnail,\n     * add the path of that image inside \"data-\" attribute\n     * and set value of this option to the name of your custom attribute.\n     *\n     * @example\n     * <div id=\"lightGallery\">\n     *     <a href=\"a.jpg\" data-external-thumb-image=\"images/externalThumb.jpg\" ><img src=\"thumb.jpg\" /></a>\n     * </div>\n     *\n     * lightGallery(document.getElementById('lightGallery'), {\n     *     exThumbImage: 'data-external-thumb-image'\n     * })\n     */\n    exThumbImage: string;\n\n    /**\n     * Function to detect mobile devices\n     */\n    isMobile?: () => boolean;\n\n    /**\n     * Separate settings for mobile devices\n     * @description Note - this is applied only at the time of loading\n     * by default controls and close buttons are disabled on mobile devices.\n     * use this options if you want to enable them or change any other settings for mobile devices\n     * Note - mobileSettings does not merge default values, You need to provide all mobileSettings including default values\n     */\n    mobileSettings: Partial<MobileSettings>;\n\n    /**\n     * Aria label strings for lightGallery core modules.\n     * @description This can be useful if you want to localize the lightGallery strings to other languages.\n     * Use your own service to translate the strings and pass it via settings.strings\n     * You can find dedicated strings option for all lightGallery modules in their respective documentation.\n     */\n    strings: LightGalleryCoreStrings;\n\n    plugins: (new (instance: LightGallery, $LG: LgQuery) => any)[];\n}\n\nexport const lightGalleryCoreSettings: LightGalleryCoreSettings = {\n    mode: 'lg-slide',\n    easing: 'ease',\n    speed: 400,\n    licenseKey: '0000-0000-000-0000',\n    height: '100%',\n    width: '100%',\n    addClass: '',\n    startClass: 'lg-start-zoom',\n    backdropDuration: 300,\n    container: '',\n    startAnimationDuration: 400,\n    zoomFromOrigin: true,\n    hideBarsDelay: 0,\n    showBarsAfter: 10000,\n    slideDelay: 0,\n    supportLegacyBrowser: true,\n    allowMediaOverlap: false,\n    videoMaxSize: '1280-720',\n    loadYouTubePoster: true,\n    defaultCaptionHeight: 0,\n    ariaLabelledby: '',\n    ariaDescribedby: '',\n    resetScrollPosition: true,\n    hideScrollbar: false,\n    closable: true,\n    swipeToClose: true,\n    closeOnTap: true,\n    showCloseIcon: true,\n    showMaximizeIcon: false,\n    loop: true,\n    escKey: true,\n    keyPress: true,\n    trapFocus: true,\n    controls: true,\n    slideEndAnimation: true,\n    hideControlOnEnd: false,\n    mousewheel: false,\n    getCaptionFromTitleOrAlt: true,\n    appendSubHtmlTo: '.lg-sub-html',\n    subHtmlSelectorRelative: false,\n    preload: 2,\n    numberOfSlideItemsInDom: 10,\n    selector: '',\n    selectWithin: '',\n    nextHtml: '',\n    prevHtml: '',\n    index: 0,\n    iframeWidth: '100%',\n    iframeHeight: '100%',\n    iframeMaxWidth: '100%',\n    iframeMaxHeight: '100%',\n    download: true,\n    counter: true,\n    appendCounterTo: '.lg-toolbar',\n    swipeThreshold: 50,\n    enableSwipe: true,\n    enableDrag: true,\n    dynamic: false,\n    dynamicEl: [],\n    extraProps: [],\n    exThumbImage: '',\n    isMobile: undefined,\n    mobileSettings: {\n        controls: false,\n        showCloseIcon: false,\n        download: false,\n    } as MobileSettings,\n    plugins: [],\n    strings: {\n        closeGallery: 'Close gallery',\n        toggleMaximize: 'Toggle maximize',\n        previousSlide: 'Previous slide',\n        nextSlide: 'Next slide',\n        download: 'Download',\n        playVideo: 'Play video',\n    } as LightGalleryCoreStrings,\n};\n","interface Offset {\n    left: number;\n    top: number;\n}\n\nfunction initLgPolyfills() {\n    (function () {\n        if (typeof window.CustomEvent === 'function') return false;\n\n        function CustomEvent(event: string, params: any) {\n            params = params || {\n                bubbles: false,\n                cancelable: false,\n                detail: null,\n            };\n            const evt = document.createEvent('CustomEvent');\n            evt.initCustomEvent(\n                event,\n                params.bubbles,\n                params.cancelable,\n                params.detail,\n            );\n            return evt;\n        }\n\n        window.CustomEvent = CustomEvent as any;\n    })();\n    (function () {\n        if (!Element.prototype.matches) {\n            Element.prototype.matches =\n                (Element.prototype as any).msMatchesSelector ||\n                Element.prototype.webkitMatchesSelector;\n        }\n    })();\n}\n\nexport type LgQuery = (selector: any) => lgQuery;\nexport class lgQuery {\n    static eventListeners: { [key: string]: any[] } = {};\n    static generateUUID(): string {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(\n            /[xy]/g,\n            function (c) {\n                const r = (Math.random() * 16) | 0,\n                    v = c == 'x' ? r : (r & 0x3) | 0x8;\n                return v.toString(16);\n            },\n        );\n    }\n\n    private selector: any;\n    private firstElement: any;\n    private cssVenderPrefixes: string[] = [\n        'TransitionDuration',\n        'TransitionTimingFunction',\n        'Transform',\n        'Transition',\n    ];\n    constructor(selector: string | Element) {\n        this.selector = this._getSelector(selector);\n        this.firstElement = this._getFirstEl();\n        return this;\n    }\n\n    private _getSelector(\n        selector: string | Element,\n        context: Element | Document = document,\n    ): Element | null | NodeListOf<Element> {\n        if (typeof selector !== 'string') {\n            return selector;\n        }\n        context = context || document;\n        const fl = selector.substring(0, 1);\n        if (fl === '#') {\n            return context.querySelector(selector);\n        } else {\n            return context.querySelectorAll(selector);\n        }\n    }\n\n    private _each(\n        func: (\n            elements: Element | NodeListOf<Element> | null,\n            index: number,\n        ) => void,\n    ): this {\n        if (!this.selector) {\n            return this;\n        }\n        if (this.selector.length !== undefined) {\n            [].forEach.call(this.selector, func);\n        } else {\n            func(this.selector, 0);\n        }\n        return this;\n    }\n\n    private _setCssVendorPrefix(\n        el: any,\n        cssProperty: string,\n        value?: string | number,\n    ): void {\n        // prettier-ignore\n        const property = cssProperty.replace(/-([a-z])/gi, function (\n            s,\n            group1,\n        ) {\n            return group1.toUpperCase();\n        });\n        if (this.cssVenderPrefixes.indexOf(property) !== -1) {\n            el.style[\n                property.charAt(0).toLowerCase() + property.slice(1)\n            ] = value;\n            el.style['webkit' + property] = value;\n            el.style['moz' + property] = value;\n            el.style['ms' + property] = value;\n            el.style['o' + property] = value;\n        } else {\n            el.style[property] = value;\n        }\n    }\n\n    private _getFirstEl() {\n        if (this.selector && this.selector.length !== undefined) {\n            return this.selector[0];\n        } else {\n            return this.selector;\n        }\n    }\n\n    private isEventMatched(event: string, eventName: string): boolean {\n        const eventNamespace = eventName.split('.');\n        return event\n            .split('.')\n            .filter((e) => e)\n            .every((e) => {\n                return eventNamespace.indexOf(e) !== -1;\n            });\n    }\n\n    attr(attr: string): string;\n    attr(attr: string, value: string | number | boolean): this;\n    attr(attr: string, value?: string | number | boolean): string | this {\n        if (value === undefined) {\n            if (!this.firstElement) {\n                return '';\n            }\n            return this.firstElement.getAttribute(attr);\n        }\n        this._each((el: any) => {\n            el.setAttribute(attr, value);\n        });\n        return this;\n    }\n\n    find(selector: any): lgQuery {\n        return $LG(this._getSelector(selector, this.selector));\n    }\n\n    first(): lgQuery {\n        if (this.selector && this.selector.length !== undefined) {\n            return $LG(this.selector[0]);\n        } else {\n            return $LG(this.selector);\n        }\n    }\n\n    eq(index: number): lgQuery {\n        return $LG(this.selector[index]);\n    }\n\n    parent(): lgQuery {\n        return $LG(this.selector.parentElement);\n    }\n\n    get(): HTMLElement {\n        return this._getFirstEl();\n    }\n\n    removeAttr(attributes: string): this {\n        const attrs = attributes.split(' ');\n        this._each((el: any) => {\n            attrs.forEach((attr: string) => el.removeAttribute(attr));\n        });\n        return this;\n    }\n\n    wrap(className: string): this {\n        if (!this.firstElement) {\n            return this;\n        }\n        const wrapper = document.createElement('div');\n        wrapper.className = className;\n        this.firstElement.parentNode.insertBefore(wrapper, this.firstElement);\n        this.firstElement.parentNode.removeChild(this.firstElement);\n        wrapper.appendChild(this.firstElement);\n        return this;\n    }\n\n    addClass(classNames = ''): this {\n        this._each((el: any) => {\n            // IE doesn't support multiple arguments\n            classNames.split(' ').forEach((className) => {\n                if (className) {\n                    el.classList.add(className);\n                }\n            });\n        });\n        return this;\n    }\n\n    removeClass(classNames: string): this {\n        this._each((el: any) => {\n            // IE doesn't support multiple arguments\n            classNames.split(' ').forEach((className) => {\n                if (className) {\n                    el.classList.remove(className);\n                }\n            });\n        });\n        return this;\n    }\n\n    hasClass(className: string): boolean {\n        if (!this.firstElement) {\n            return false;\n        }\n        return this.firstElement.classList.contains(className);\n    }\n    hasAttribute(attribute: string): boolean {\n        if (!this.firstElement) {\n            return false;\n        }\n        return this.firstElement.hasAttribute(attribute);\n    }\n    toggleClass(className: string): this {\n        if (!this.firstElement) {\n            return this;\n        }\n        if (this.hasClass(className)) {\n            this.removeClass(className);\n        } else {\n            this.addClass(className);\n        }\n        return this;\n    }\n\n    css(property: string, value?: string | number): this {\n        this._each((el: any) => {\n            this._setCssVendorPrefix(el, property, value);\n        });\n        return this;\n    }\n    // Need to pass separate namespaces for separate elements\n    on(events: string, listener: (e: any) => void): this {\n        if (!this.selector) {\n            return this;\n        }\n        events.split(' ').forEach((event: string) => {\n            if (!Array.isArray(lgQuery.eventListeners[event])) {\n                lgQuery.eventListeners[event] = [];\n            }\n            lgQuery.eventListeners[event].push(listener);\n            this.selector.addEventListener(event.split('.')[0], listener);\n        });\n\n        return this;\n    }\n    // @todo - test this\n    once(event: string, listener: (e: any) => void): this {\n        this.on(event, () => {\n            this.off(event);\n            listener(event);\n        });\n        return this;\n    }\n    off(event: string): this {\n        if (!this.selector) {\n            return this;\n        }\n        Object.keys(lgQuery.eventListeners).forEach((eventName) => {\n            if (this.isEventMatched(event, eventName)) {\n                lgQuery.eventListeners[eventName].forEach((listener) => {\n                    this.selector.removeEventListener(\n                        eventName.split('.')[0],\n                        listener,\n                    );\n                });\n                lgQuery.eventListeners[eventName] = [];\n            }\n        });\n\n        return this;\n    }\n    trigger<Detail>(event: string, detail?: Detail): this {\n        if (!this.firstElement) {\n            return this;\n        }\n\n        const customEvent = new CustomEvent(event.split('.')[0], {\n            detail: detail || null,\n        });\n        this.firstElement.dispatchEvent(customEvent);\n        return this;\n    }\n\n    // Does not support IE\n    load(url: string): this {\n        fetch(url)\n            .then((res) => res.text())\n            .then((html) => {\n                this.selector.innerHTML = html;\n            });\n        return this;\n    }\n\n    html(): string;\n    html(html: string): this;\n    html(html?: string): string | this {\n        if (html === undefined) {\n            if (!this.firstElement) {\n                return '';\n            }\n            return this.firstElement.innerHTML;\n        }\n        this._each((el: any) => {\n            el.innerHTML = html;\n        });\n        return this;\n    }\n    append(html: string | HTMLElement): this {\n        this._each((el: any) => {\n            if (typeof html === 'string') {\n                el.insertAdjacentHTML('beforeend', html);\n            } else {\n                el.appendChild(html);\n            }\n        });\n        return this;\n    }\n    prepend(html: string): this {\n        this._each((el: any) => {\n            el.insertAdjacentHTML('afterbegin', html);\n        });\n        return this;\n    }\n    remove(): this {\n        this._each((el: any) => {\n            el.parentNode.removeChild(el);\n        });\n        return this;\n    }\n    empty(): this {\n        this._each((el: any) => {\n            el.innerHTML = '';\n        });\n        return this;\n    }\n    // Supports only window\n    scrollTop(): number;\n    scrollTop(scrollTop: number): this;\n    scrollTop(scrollTop?: number): number | this {\n        if (scrollTop !== undefined) {\n            document.body.scrollTop = scrollTop;\n            document.documentElement.scrollTop = scrollTop;\n            return this;\n        } else {\n            return (\n                window.pageYOffset ||\n                document.documentElement.scrollTop ||\n                document.body.scrollTop ||\n                0\n            );\n        }\n    }\n    // Supports only window\n    scrollLeft(): number;\n    scrollLeft(scrollLeft?: number): this;\n    scrollLeft(scrollLeft?: number): number | this {\n        if (scrollLeft !== undefined) {\n            document.body.scrollLeft = scrollLeft;\n            document.documentElement.scrollLeft = scrollLeft;\n            return this;\n        } else {\n            return (\n                window.pageXOffset ||\n                document.documentElement.scrollLeft ||\n                document.body.scrollLeft ||\n                0\n            );\n        }\n    }\n    offset(): Offset {\n        if (!this.firstElement) {\n            return {\n                left: 0,\n                top: 0,\n            };\n        }\n        const rect = this.firstElement.getBoundingClientRect();\n        const bodyMarginLeft = $LG('body').style().marginLeft;\n\n        // Minus body margin - https://stackoverflow.com/questions/30711548/is-getboundingclientrect-left-returning-a-wrong-value\n        return {\n            left: rect.left - parseFloat(bodyMarginLeft) + this.scrollLeft(),\n            top: rect.top + this.scrollTop(),\n        };\n    }\n    style(): CSSStyleDeclaration {\n        if (!this.firstElement) {\n            return {} as CSSStyleDeclaration;\n        }\n        return (\n            this.firstElement.currentStyle ||\n            window.getComputedStyle(this.firstElement)\n        );\n    }\n    // Width without padding and border even if box-sizing is used.\n    width(): number {\n        const style = this.style();\n        return (\n            this.firstElement.clientWidth -\n            parseFloat(style.paddingLeft) -\n            parseFloat(style.paddingRight)\n        );\n    }\n    // Height without padding and border even if box-sizing is used.\n    height(): number {\n        const style = this.style();\n        return (\n            this.firstElement.clientHeight -\n            parseFloat(style.paddingTop) -\n            parseFloat(style.paddingBottom)\n        );\n    }\n}\n\nexport function $LG(selector: any): lgQuery {\n    initLgPolyfills();\n    return new lgQuery(selector);\n}\n","import { $LG, lgQuery } from './lgQuery';\nimport { VideoSource } from './plugins/video/types';\nimport { VideoInfo } from './types';\n\nexport interface ImageSize {\n    width: number;\n    height: number;\n}\n\nexport interface ImageSources {\n    media?: string;\n    srcset: string;\n    sizes?: string;\n    type?: string;\n}\n\nexport interface GalleryItem {\n    /**\n     * url of the media\n     * @data-attr data-src\n     */\n    src?: string;\n\n    /**\n     * Source attributes for the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source#attributes\">picture</a> element\n     * @data-attr data-sources\n     */\n    sources?: ImageSources[];\n\n    /**\n     * Thumbnail url\n     * @description By default lightGallery uses the image inside gallery selector as thumbnail.\n     * But, If you want to use external image for thumbnail,\n     * pass the thumbnail url via any data attribute and\n     * pass the attribute name via exThumbImage option\n     * @example\n     * <div id=\"lightGallery\">\n     *     <a href=\"a.jpg\" data-external-thumb-image=\"images/externalThumb.jpg\" ><img src=\"thumb.jpg\" /></a>\n     * </div>\n     *\n     * lightGallery(document.getElementById('lightGallery'), {\n     *     exThumbImage: 'data-external-thumb-image'\n     * })\n     * @data-attr data-*\n     */\n    thumb?: string;\n\n    /**\n     * alt attribute for the image\n     * @data-attr alt\n     */\n    alt?: string;\n\n    /**\n     * Title attribute for the video\n     * @data-attr title\n     */\n    title?: string;\n\n    /**\n     * Title for iframe\n     * @data-attr data-iframe-title\n     */\n    iframeTitle?: string;\n\n    /**\n     * Caption for the slide\n     * @description You can either pass the HTML markup or the ID or class name of the element which contains the captions\n     * @data-attr data-sub-html\n     */\n    subHtml?: string;\n\n    /**\n     * url of the file which contain the sub html.\n     * @description Note - Does not support Internet Explorer browser\n     * @data-attr data-sub-html-url\n     */\n    subHtmlUrl?: string;\n\n    /**\n     * Video source\n     * @data-attr data-video\n     */\n    video?: VideoSource;\n\n    /**\n     * Poster url\n     * @data-attr data-poster\n     */\n    poster?: string;\n\n    /**\n     * Custom slide name to use in the url when hash plugin is enabled\n     * @data-attr data-slide-name\n     */\n    slideName?: string;\n\n    /**\n     * List of images and viewport's max width separated by comma.\n     * @description Ex?: img/1-375.jpg 375, img/1-480.jpg 480, img/1-757.jpg 757.\n     * @data-attr data-responsive\n     */\n    responsive?: string;\n\n    /**\n     * srcset attribute values for the main image\n     * @data-attr data-srcset\n     */\n    srcset?: string;\n\n    /**\n     * srcset sizes attribute for the main image\n     * @data-attr data-sizes\n     */\n    sizes?: string;\n\n    /**\n     * Set true is you want to open your url in an iframe\n     * @data-attr data-iframe\n     */\n    iframe?: boolean;\n\n    /**\n     * Download url for your image/video.\n     * @description Pass false if you want to disable the download button.\n     * @data-attr data-download-url\n     */\n    downloadUrl?: string | boolean;\n\n    /**\n     * Name of the file after it is downloaded.\n     * @description The HTML value of the download attribute.\n     * There are no restrictions on allowed values, and the browser will automatically\n     * detect the correct file extension and add it to the file (.img, .pdf, .txt, .html, etc.).\n     * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download\">More info</a>\n     * @data-attr data-download\n     */\n    download?: string | boolean;\n\n    /**\n     * Actual size of the image in px.\n     * @description This is used in zoom plugin to see the actual size of the image when double taped on the image.\n     * @data-attr data-width\n     */\n    width?: string;\n\n    /**\n     * Facebook share URL.\n     * @description Specify only if you want to provide separate share URL for the specific slide. By default, current browser URL is taken.\n     * @data-attr data-facebook-share-url\n     */\n    facebookShareUrl?: string;\n\n    /**\n     * Tweet text\n     * @data-attr data-tweet-text\n     */\n    tweetText?: string;\n\n    /**\n     * Twitter share URL.\n     * @description Specify only if you want to provide separate share URL for the specific slide. By default, current browser URL will be taken.\n     * @data-attr data-twitter-share-url\n     */\n    twitterShareUrl?: string;\n\n    /**\n     * Pinterest share URL.\n     * @description Specify only if you want to provide separate share URL for the specific slide. By default, current browser URL will be taken.\n     * Note?: Pinterest requires absolute URL\n     * @data-attr data-pinterest-share-url\n     */\n    pinterestShareUrl?: string;\n\n    /**\n     * Description for Pinterest post.\n     * @data-attr data-pinterest-text\n     */\n    pinterestText?: string;\n\n    /**\n     * Facebook comments body html\n     * @description Please refer <a href=\"https://developers.facebook.com/docs/plugins/comments/#comments-plugin\">facebook official documentation</a> for generating the HTML markup\n     * @example\n     * <div\n     *      class=\"fb-comments\"\n     *      data-href=\"https://www.lightgalleryjs.com/demos/comment-box/#facebook-comments-demo\"\n     *      data-width=\"400\"\n     *      data-numposts=\"5\">\n     * </div>\n     * @data-attr data-fb-html\n     */\n    fbHtml?: string;\n\n    /**\n     * Disqus page identifier\n     * @description Please refer official <a href=\"https://help.disqus.com/en/articles/1717084-javascript-configuration-variables\">disqus documentation</a> for more info\n     * @data-attr data-disqus-identifier\n     */\n    disqusIdentifier?: string;\n\n    /**\n     * Disqus page url\n     * @description Please refer official <a href=\"https://help.disqus.com/en/articles/1717084-javascript-configuration-variables\">disqus documentation</a> for more info\n     * @data-attr data-disqus-url\n     */\n    disqusUrl?: string;\n\n    __slideVideoInfo?: VideoInfo;\n    [key: string]: any;\n}\n\nconst defaultDynamicOptions = [\n    'src',\n    'sources',\n    'subHtml',\n    'subHtmlUrl',\n    'html',\n    'video',\n    'poster',\n    'slideName',\n    'responsive',\n    'srcset',\n    'sizes',\n    'iframe',\n    'downloadUrl',\n    'download',\n    'width',\n    'facebookShareUrl',\n    'tweetText',\n    'iframeTitle',\n    'twitterShareUrl',\n    'pinterestShareUrl',\n    'pinterestText',\n    'fbHtml',\n    'disqusIdentifier',\n    'disqusUrl',\n];\n\n// Convert html data-attribute to camalcase\nexport function convertToData(attr: string): string {\n    // FInd a way for lgsize\n    if (attr === 'href') {\n        return 'src';\n    }\n    attr = attr.replace('data-', '');\n    attr = attr.charAt(0).toLowerCase() + attr.slice(1);\n    attr = attr.replace(/-([a-z])/g, (g) => g[1].toUpperCase());\n\n    return attr;\n}\n\nconst utils = {\n    /**\n     * get possible width and height from the lgSize attribute. Used for ZoomFromOrigin option\n     */\n    getSize(\n        el: HTMLElement,\n        container: lgQuery,\n        spacing = 0,\n        defaultLgSize?: string,\n    ): ImageSize | undefined {\n        const LGel = $LG(el);\n        let lgSize = LGel.attr('data-lg-size') || defaultLgSize;\n\n        if (!lgSize) {\n            return;\n        }\n\n        const isResponsiveSizes = lgSize.split(',');\n        // if at-least two viewport sizes are available\n        if (isResponsiveSizes[1]) {\n            const wWidth = window.innerWidth;\n            for (let i = 0; i < isResponsiveSizes.length; i++) {\n                const size = isResponsiveSizes[i];\n                const responsiveWidth = parseInt(size.split('-')[2], 10);\n                if (responsiveWidth > wWidth) {\n                    lgSize = size;\n                    break;\n                }\n\n                // take last item as last option\n                if (i === isResponsiveSizes.length - 1) {\n                    lgSize = size;\n                }\n            }\n        }\n\n        const size = lgSize.split('-');\n\n        const width = parseInt(size[0], 10);\n        const height = parseInt(size[1], 10);\n\n        const cWidth = container.width();\n        const cHeight = container.height() - spacing;\n\n        const maxWidth = Math.min(cWidth, width);\n        const maxHeight = Math.min(cHeight, height);\n\n        const ratio = Math.min(maxWidth / width, maxHeight / height);\n\n        return { width: width * ratio, height: height * ratio };\n    },\n\n    /**\n     * @desc Get transform value based on the imageSize. Used for ZoomFromOrigin option\n     * @param {jQuery Element}\n     * @returns {String} Transform CSS string\n     */\n    getTransform(\n        el: HTMLElement,\n        container: lgQuery,\n        top: number,\n        bottom: number,\n        imageSize?: ImageSize,\n    ): string | undefined {\n        if (!imageSize) {\n            return;\n        }\n        const LGel = $LG(el).find('img').first();\n        if (!LGel.get()) {\n            return;\n        }\n\n        const containerRect = container.get().getBoundingClientRect();\n\n        const wWidth = containerRect.width;\n\n        // using innerWidth to include mobile safari bottom bar\n        const wHeight = container.height() - (top + bottom);\n\n        const elWidth = LGel.width();\n        const elHeight = LGel.height();\n\n        const elStyle = LGel.style();\n        let x =\n            (wWidth - elWidth) / 2 -\n            LGel.offset().left +\n            (parseFloat(elStyle.paddingLeft) || 0) +\n            (parseFloat(elStyle.borderLeft) || 0) +\n            $LG(window).scrollLeft() +\n            containerRect.left;\n        let y =\n            (wHeight - elHeight) / 2 -\n            LGel.offset().top +\n            (parseFloat(elStyle.paddingTop) || 0) +\n            (parseFloat(elStyle.borderTop) || 0) +\n            $LG(window).scrollTop() +\n            top;\n\n        const scX = elWidth / imageSize.width;\n        const scY = elHeight / imageSize.height;\n\n        const transform =\n            'translate3d(' +\n            (x *= -1) +\n            'px, ' +\n            (y *= -1) +\n            'px, 0) scale3d(' +\n            scX +\n            ', ' +\n            scY +\n            ', 1)';\n        return transform;\n    },\n\n    getIframeMarkup(\n        iframeWidth: string,\n        iframeHeight: string,\n        iframeMaxWidth: string,\n        iframeMaxHeight: string,\n        src?: string,\n        iframeTitle?: string,\n    ): string {\n        const title = iframeTitle ? 'title=\"' + iframeTitle + '\"' : '';\n        return `<div class=\"lg-video-cont lg-has-iframe\" style=\"width:${iframeWidth}; max-width:${iframeMaxWidth}; height: ${iframeHeight}; max-height:${iframeMaxHeight}\">\n                    <iframe class=\"lg-object\" frameborder=\"0\" ${title} src=\"${src}\"  allowfullscreen=\"true\"></iframe>\n                </div>`;\n    },\n\n    getImgMarkup(\n        index: number,\n        src: string,\n        altAttr: string,\n        srcset?: string,\n        sizes?: string,\n        sources?: ImageSources[],\n    ): string {\n        const srcsetAttr = srcset ? `srcset=\"${srcset}\"` : '';\n        const sizesAttr = sizes ? `sizes=\"${sizes}\"` : '';\n        const imgMarkup = `<img ${altAttr} ${srcsetAttr}  ${sizesAttr} class=\"lg-object lg-image\" data-index=\"${index}\" src=\"${src}\" />`;\n        let sourceTag = '';\n        if (sources) {\n            const sourceObj =\n                typeof sources === 'string' ? JSON.parse(sources) : sources;\n\n            sourceTag = sourceObj.map((source: any) => {\n                let attrs = '';\n                Object.keys(source).forEach((key) => {\n                    // Do not remove the first space as it is required to separate the attributes\n                    attrs += ` ${key}=\"${source[key]}\"`;\n                });\n                return `<source ${attrs}></source>`;\n            });\n        }\n        return `${sourceTag}${imgMarkup}`;\n    },\n\n    // Get src from responsive src\n    getResponsiveSrc(srcItms: string[]): string {\n        const rsWidth = [];\n        const rsSrc = [];\n        let src = '';\n        for (let i = 0; i < srcItms.length; i++) {\n            const _src = srcItms[i].split(' ');\n\n            // Manage empty space\n            if (_src[0] === '') {\n                _src.splice(0, 1);\n            }\n\n            rsSrc.push(_src[0]);\n            rsWidth.push(_src[1]);\n        }\n\n        const wWidth = window.innerWidth;\n        for (let j = 0; j < rsWidth.length; j++) {\n            if (parseInt(rsWidth[j], 10) > wWidth) {\n                src = rsSrc[j];\n                break;\n            }\n        }\n        return src;\n    },\n\n    isImageLoaded(img: HTMLImageElement): boolean {\n        if (!img) return false;\n        // During the onload event, IE correctly identifies any images that\n        // weren’t downloaded as not complete. Others should too. Gecko-based\n        // browsers act like NS4 in that they report this incorrectly.\n        if (!img.complete) {\n            return false;\n        }\n\n        // However, they do have two very useful properties: naturalWidth and\n        // naturalHeight. These give the true size of the image. If it failed\n        // to load, either of these should be zero.\n        if (img.naturalWidth === 0) {\n            return false;\n        }\n\n        // No other way of checking: assume it’s ok.\n        return true;\n    },\n\n    getVideoPosterMarkup(\n        _poster: string,\n        dummyImg: string,\n        videoContStyle: string,\n        playVideoString: string,\n        _isVideo?: VideoInfo,\n    ): string {\n        let videoClass = '';\n        if (_isVideo && _isVideo.youtube) {\n            videoClass = 'lg-has-youtube';\n        } else if (_isVideo && _isVideo.vimeo) {\n            videoClass = 'lg-has-vimeo';\n        } else {\n            videoClass = 'lg-has-html5';\n        }\n\n        return `<div class=\"lg-video-cont ${videoClass}\" style=\"${videoContStyle}\">\n                <div class=\"lg-video-play-button\">\n                <svg\n                    viewBox=\"0 0 20 20\"\n                    preserveAspectRatio=\"xMidYMid\"\n                    focusable=\"false\"\n                    aria-labelledby=\"${playVideoString}\"\n                    role=\"img\"\n                    class=\"lg-video-play-icon\"\n                >\n                    <title>${playVideoString}</title>\n                    <polygon class=\"lg-video-play-icon-inner\" points=\"1,0 20,10 1,20\"></polygon>\n                </svg>\n                <svg class=\"lg-video-play-icon-bg\" viewBox=\"0 0 50 50\" focusable=\"false\">\n                    <circle cx=\"50%\" cy=\"50%\" r=\"20\"></circle></svg>\n                <svg class=\"lg-video-play-icon-circle\" viewBox=\"0 0 50 50\" focusable=\"false\">\n                    <circle cx=\"50%\" cy=\"50%\" r=\"20\"></circle>\n                </svg>\n            </div>\n            ${dummyImg || ''}\n            <img class=\"lg-object lg-video-poster\" src=\"${_poster}\" />\n        </div>`;\n    },\n\n    getFocusableElements(container: HTMLElement): NodeListOf<Element> {\n        const elements = container.querySelectorAll(\n            'a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type=\"text\"]:not([disabled]), input[type=\"radio\"]:not([disabled]), input[type=\"checkbox\"]:not([disabled]), select:not([disabled])',\n        );\n        const visibleElements = [].filter.call(elements, (element) => {\n            const style = window.getComputedStyle(element);\n            return style.display !== 'none' && style.visibility !== 'hidden';\n        });\n        return (visibleElements as unknown) as NodeListOf<Element>;\n    },\n\n    /**\n     * @desc Create dynamic elements array from gallery items when dynamic option is false\n     * It helps to avoid frequent DOM interaction\n     * and avoid multiple checks for dynamic elments\n     *\n     * @returns {Array} dynamicEl\n     */\n    getDynamicOptions(\n        items: any,\n        extraProps: string[],\n        getCaptionFromTitleOrAlt: boolean,\n        exThumbImage: string,\n    ): GalleryItem[] {\n        const dynamicElements: GalleryItem[] = [];\n        const availableDynamicOptions = [\n            ...defaultDynamicOptions,\n            ...extraProps,\n        ];\n        [].forEach.call(items, (item: HTMLElement) => {\n            const dynamicEl: GalleryItem = {} as GalleryItem;\n            for (let i = 0; i < item.attributes.length; i++) {\n                const attr = item.attributes[i];\n                if (attr.specified) {\n                    const dynamicAttr = convertToData(attr.name);\n                    let label = '';\n                    if (availableDynamicOptions.indexOf(dynamicAttr) > -1) {\n                        label = dynamicAttr;\n                    }\n                    if (label) {\n                        (dynamicEl as any)[label] = attr.value;\n                    }\n                }\n            }\n            const currentItem = $LG(item);\n            const alt = currentItem.find('img').first().attr('alt');\n            const title = currentItem.attr('title');\n\n            const thumb = exThumbImage\n                ? currentItem.attr(exThumbImage)\n                : currentItem.find('img').first().attr('src');\n            dynamicEl.thumb = thumb;\n\n            if (getCaptionFromTitleOrAlt && !dynamicEl.subHtml) {\n                dynamicEl.subHtml = title || alt || '';\n            }\n            dynamicEl.alt = alt || title || '';\n            dynamicElements.push(dynamicEl);\n        });\n        return dynamicElements;\n    },\n    isMobile(): boolean {\n        return /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n    },\n    /**\n     * @desc Check the given src is video\n     * @param {String} src\n     * @return {Object} video type\n     * Ex:{ youtube  :  [\"//www.youtube.com/watch?v=c0asJgSyxcY\", \"c0asJgSyxcY\"] }\n     *\n     * @todo - this information can be moved to dynamicEl to avoid frequent calls\n     */\n\n    isVideo(\n        src: string,\n        isHTML5VIdeo: boolean,\n        index: number,\n    ): VideoInfo | undefined {\n        if (!src) {\n            if (isHTML5VIdeo) {\n                return {\n                    html5: true,\n                };\n            } else {\n                console.error(\n                    'lightGallery :- data-src is not provided on slide item ' +\n                        (index + 1) +\n                        '. Please make sure the selector property is properly configured. More info - https://www.lightgalleryjs.com/demos/html-markup/',\n                );\n                return;\n            }\n        }\n\n        const youtube = src.match(\n            /\\/\\/(?:www\\.)?youtu(?:\\.be|be\\.com|be-nocookie\\.com)\\/(?:watch\\?v=|embed\\/)?([a-z0-9\\-\\_\\%]+)([\\&|?][\\S]*)*/i,\n        );\n        const vimeo = src.match(\n            /\\/\\/(?:www\\.)?(?:player\\.)?vimeo.com\\/(?:video\\/)?([0-9a-z\\-_]+)(.*)?/i,\n        );\n        const wistia = src.match(\n            /https?:\\/\\/(.+)?(wistia\\.com|wi\\.st)\\/(medias|embed)\\/([0-9a-z\\-_]+)(.*)/,\n        );\n\n        if (youtube) {\n            return {\n                youtube,\n            };\n        } else if (vimeo) {\n            return {\n                vimeo,\n            };\n        } else if (wistia) {\n            return {\n                wistia,\n            };\n        }\n    },\n};\n\nexport default utils;\n","import {\n    AfterAppendSlideEventDetail,\n    AfterAppendSubHtmlDetail,\n    BeforeSlideDetail,\n    lGEvents,\n    SlideItemLoadDetail,\n} from './lg-events';\nimport {\n    LightGalleryAllSettings,\n    lightGalleryCoreSettings,\n    LightGallerySettings,\n} from './lg-settings';\nimport utils, { GalleryItem, ImageSize } from './lg-utils';\nimport { $LG, lgQuery } from './lgQuery';\nimport {\n    Coords,\n    MediaContainerPosition,\n    SlideDirection,\n    VideoInfo,\n} from './types';\n\ndeclare let picturefill: any;\n\n// @ref - https://stackoverflow.com/questions/3971841/how-to-resize-images-proportionally-keeping-the-aspect-ratio\n// @ref - https://2ality.com/2017/04/setting-up-multi-platform-packages.html\n\n// Unique id for each gallery\nlet lgId = 0;\n\nexport class LightGallery {\n    public settings!: LightGalleryAllSettings;\n    public galleryItems!: GalleryItem[];\n\n    // Current gallery item\n    public lgId!: number;\n\n    public el!: HTMLElement;\n    public LGel!: lgQuery;\n    public lgOpened = false;\n\n    public index = 0;\n\n    // lightGallery modules\n    public plugins: any[] = [];\n\n    // false when lightGallery load first slide content;\n    public lGalleryOn = false;\n\n    // True when a slide animation is in progress\n    public lgBusy = false;\n\n    // Type of touch action - {swipe, zoomSwipe, pinch}\n    public touchAction?: 'swipe' | 'zoomSwipe' | 'pinch';\n\n    // Direction of swipe/drag - {horizontal, vertical}\n    public swipeDirection?: 'horizontal' | 'vertical';\n\n    // Timeout function for hiding controls;\n    public hideBarTimeout: any;\n\n    public currentItemsInDom: string[] = [];\n\n    public outer!: lgQuery;\n\n    public items: any;\n\n    public $backdrop!: lgQuery;\n    public $lgComponents!: lgQuery;\n\n    public $container!: lgQuery;\n\n    public $inner!: lgQuery;\n    public $content!: lgQuery;\n    public $toolbar!: lgQuery;\n\n    // Scroll top value before lightGallery is opened\n    public prevScrollTop = 0;\n\n    public bodyPaddingRight = 0;\n\n    private zoomFromOrigin!: boolean;\n\n    private currentImageSize?: ImageSize;\n\n    private isDummyImageRemoved = false;\n\n    private dragOrSwipeEnabled = false;\n\n    public mediaContainerPosition = {\n        top: 0,\n        bottom: 0,\n    };\n\n    constructor(element: HTMLElement, options?: LightGallerySettings) {\n        if (!element) {\n            return this;\n        }\n        lgId++;\n        this.lgId = lgId;\n\n        this.el = element;\n        this.LGel = $LG(element);\n\n        this.generateSettings(options);\n\n        this.buildModules();\n\n        // When using dynamic mode, ensure dynamicEl is an array\n        if (\n            this.settings.dynamic &&\n            this.settings.dynamicEl !== undefined &&\n            !Array.isArray(this.settings.dynamicEl)\n        ) {\n            throw 'When using dynamic mode, you must also define dynamicEl as an Array.';\n        }\n\n        this.galleryItems = this.getItems();\n        this.normalizeSettings();\n\n        // Gallery items\n\n        this.init();\n\n        this.validateLicense();\n\n        return this;\n    }\n\n    private generateSettings(options?: LightGallerySettings) {\n        // lightGallery settings\n        this.settings = {\n            ...lightGalleryCoreSettings,\n            ...options,\n        } as LightGalleryAllSettings;\n        if (\n            this.settings.isMobile &&\n            typeof this.settings.isMobile === 'function'\n                ? this.settings.isMobile()\n                : utils.isMobile()\n        ) {\n            const mobileSettings = {\n                ...this.settings.mobileSettings,\n                ...this.settings.mobileSettings,\n            };\n            this.settings = { ...this.settings, ...mobileSettings };\n        }\n    }\n\n    private normalizeSettings() {\n        if (this.settings.slideEndAnimation) {\n            this.settings.hideControlOnEnd = false;\n        }\n        if (!this.settings.closable) {\n            this.settings.swipeToClose = false;\n        }\n\n        // And reset it on close to get the correct value next time\n        this.zoomFromOrigin = this.settings.zoomFromOrigin;\n\n        // At the moment, Zoom from image doesn't support dynamic options\n        // @todo add zoomFromOrigin support for dynamic images\n        if (this.settings.dynamic) {\n            this.zoomFromOrigin = false;\n        }\n\n        if (!this.settings.container) {\n            this.settings.container = document.body;\n        }\n\n        // settings.preload should not be grater than $item.length\n        this.settings.preload = Math.min(\n            this.settings.preload,\n            this.galleryItems.length,\n        );\n    }\n\n    init(): void {\n        this.addSlideVideoInfo(this.galleryItems);\n\n        this.buildStructure();\n\n        this.LGel.trigger(lGEvents.init, {\n            instance: this,\n        });\n\n        if (this.settings.keyPress) {\n            this.keyPress();\n        }\n\n        setTimeout(() => {\n            this.enableDrag();\n            this.enableSwipe();\n            this.triggerPosterClick();\n        }, 50);\n\n        this.arrow();\n        if (this.settings.mousewheel) {\n            this.mousewheel();\n        }\n\n        if (!this.settings.dynamic) {\n            this.openGalleryOnItemClick();\n        }\n    }\n\n    openGalleryOnItemClick(): void {\n        // Using for loop instead of using bubbling as the items can be any html element.\n        for (let index = 0; index < this.items.length; index++) {\n            const element = this.items[index];\n            const $element = $LG(element);\n            // Using different namespace for click because click event should not unbind if selector is same object('this')\n            // @todo manage all event listners - should have namespace that represent element\n            const uuid = lgQuery.generateUUID();\n            $element\n                .attr('data-lg-id', uuid)\n                .on(`click.lgcustom-item-${uuid}`, (e) => {\n                    e.preventDefault();\n                    const currentItemIndex = this.settings.index || index;\n                    this.openGallery(currentItemIndex, element);\n                });\n        }\n    }\n\n    /**\n     * Module constructor\n     * Modules are build incrementally.\n     * Gallery should be opened only once all the modules are initialized.\n     * use moduleBuildTimeout to make sure this\n     */\n    buildModules(): void {\n        this.settings.plugins.forEach((plugin) => {\n            this.plugins.push(new plugin(this, $LG));\n        });\n    }\n\n    validateLicense(): void {\n        if (!this.settings.licenseKey) {\n            console.error('Please provide a valid license key');\n        } else if (this.settings.licenseKey === '0000-0000-000-0000') {\n            console.warn(\n                `lightGallery: ${this.settings.licenseKey} license key is not valid for production use`,\n            );\n        }\n    }\n\n    getSlideItem(index: number): lgQuery {\n        return $LG(this.getSlideItemId(index));\n    }\n\n    getSlideItemId(index: number): string {\n        return `#lg-item-${this.lgId}-${index}`;\n    }\n\n    getIdName(id: string): string {\n        return `${id}-${this.lgId}`;\n    }\n    getElementById(id: string): lgQuery {\n        return $LG(`#${this.getIdName(id)}`);\n    }\n\n    manageSingleSlideClassName(): void {\n        if (this.galleryItems.length < 2) {\n            this.outer.addClass('lg-single-item');\n        } else {\n            this.outer.removeClass('lg-single-item');\n        }\n    }\n\n    buildStructure(): void {\n        const container = this.$container && this.$container.get();\n        if (container) {\n            return;\n        }\n        let controls = '';\n        let subHtmlCont = '';\n\n        // Create controls\n        if (this.settings.controls) {\n            controls = `<button type=\"button\" id=\"${this.getIdName(\n                'lg-prev',\n            )}\" aria-label=\"${\n                this.settings.strings['previousSlide']\n            }\" class=\"lg-prev lg-icon\"> ${this.settings.prevHtml} </button>\n                <button type=\"button\" id=\"${this.getIdName(\n                    'lg-next',\n                )}\" aria-label=\"${\n                this.settings.strings['nextSlide']\n            }\" class=\"lg-next lg-icon\"> ${this.settings.nextHtml} </button>`;\n        }\n\n        if (this.settings.appendSubHtmlTo !== '.lg-item') {\n            subHtmlCont =\n                '<div class=\"lg-sub-html\" role=\"status\" aria-live=\"polite\"></div>';\n        }\n\n        let addClasses = '';\n\n        if (this.settings.allowMediaOverlap) {\n            // Do not remove space before last single quote\n            addClasses += 'lg-media-overlap ';\n        }\n\n        const ariaLabelledby = this.settings.ariaLabelledby\n            ? 'aria-labelledby=\"' + this.settings.ariaLabelledby + '\"'\n            : '';\n        const ariaDescribedby = this.settings.ariaDescribedby\n            ? 'aria-describedby=\"' + this.settings.ariaDescribedby + '\"'\n            : '';\n\n        const containerClassName = `lg-container ${this.settings.addClass} ${\n            document.body !== this.settings.container ? 'lg-inline' : ''\n        }`;\n        const closeIcon =\n            this.settings.closable && this.settings.showCloseIcon\n                ? `<button type=\"button\" aria-label=\"${\n                      this.settings.strings['closeGallery']\n                  }\" id=\"${this.getIdName(\n                      'lg-close',\n                  )}\" class=\"lg-close lg-icon\"></button>`\n                : '';\n        const maximizeIcon = this.settings.showMaximizeIcon\n            ? `<button type=\"button\" aria-label=\"${\n                  this.settings.strings['toggleMaximize']\n              }\" id=\"${this.getIdName(\n                  'lg-maximize',\n              )}\" class=\"lg-maximize lg-icon\"></button>`\n            : '';\n        const template = `\n        <div class=\"${containerClassName}\" id=\"${this.getIdName(\n            'lg-container',\n        )}\" tabindex=\"-1\" aria-modal=\"true\" ${ariaLabelledby} ${ariaDescribedby} role=\"dialog\"\n        >\n            <div id=\"${this.getIdName(\n                'lg-backdrop',\n            )}\" class=\"lg-backdrop\"></div>\n\n            <div id=\"${this.getIdName(\n                'lg-outer',\n            )}\" class=\"lg-outer lg-use-css3 lg-css3 lg-hide-items ${addClasses} \">\n\n              <div id=\"${this.getIdName('lg-content')}\" class=\"lg-content\">\n                <div id=\"${this.getIdName('lg-inner')}\" class=\"lg-inner\">\n                </div>\n                ${controls}\n              </div>\n                <div id=\"${this.getIdName(\n                    'lg-toolbar',\n                )}\" class=\"lg-toolbar lg-group\">\n                    ${maximizeIcon}\n                    ${closeIcon}\n                    </div>\n                    ${\n                        this.settings.appendSubHtmlTo === '.lg-outer'\n                            ? subHtmlCont\n                            : ''\n                    }\n                <div id=\"${this.getIdName(\n                    'lg-components',\n                )}\" class=\"lg-components\">\n                    ${\n                        this.settings.appendSubHtmlTo === '.lg-sub-html'\n                            ? subHtmlCont\n                            : ''\n                    }\n                </div>\n            </div>\n        </div>\n        `;\n\n        $LG(this.settings.container).append(template);\n\n        if (document.body !== this.settings.container) {\n            $LG(this.settings.container).css('position', 'relative');\n        }\n\n        this.outer = this.getElementById('lg-outer');\n        this.$lgComponents = this.getElementById('lg-components');\n        this.$backdrop = this.getElementById('lg-backdrop');\n        this.$container = this.getElementById('lg-container');\n        this.$inner = this.getElementById('lg-inner');\n        this.$content = this.getElementById('lg-content');\n        this.$toolbar = this.getElementById('lg-toolbar');\n\n        this.$backdrop.css(\n            'transition-duration',\n            this.settings.backdropDuration + 'ms',\n        );\n\n        let outerClassNames = `${this.settings.mode} `;\n\n        this.manageSingleSlideClassName();\n\n        if (this.settings.enableDrag) {\n            outerClassNames += 'lg-grab ';\n        }\n\n        this.outer.addClass(outerClassNames);\n\n        this.$inner.css('transition-timing-function', this.settings.easing);\n        this.$inner.css('transition-duration', this.settings.speed + 'ms');\n\n        if (this.settings.download) {\n            this.$toolbar.append(\n                `<a id=\"${this.getIdName(\n                    'lg-download',\n                )}\" target=\"_blank\" rel=\"noopener\" aria-label=\"${\n                    this.settings.strings['download']\n                }\" download class=\"lg-download lg-icon\"></a>`,\n            );\n        }\n\n        this.counter();\n\n        $LG(window).on(\n            `resize.lg.global${this.lgId} orientationchange.lg.global${this.lgId}`,\n            () => {\n                this.refreshOnResize();\n            },\n        );\n\n        this.hideBars();\n\n        this.manageCloseGallery();\n        this.toggleMaximize();\n\n        this.initModules();\n    }\n\n    refreshOnResize(): void {\n        if (this.lgOpened) {\n            const currentGalleryItem = this.galleryItems[this.index];\n            const { __slideVideoInfo } = currentGalleryItem;\n\n            this.mediaContainerPosition = this.getMediaContainerPosition();\n            const { top, bottom } = this.mediaContainerPosition;\n            this.currentImageSize = utils.getSize(\n                this.items[this.index],\n                this.outer,\n                top + bottom,\n                __slideVideoInfo && this.settings.videoMaxSize,\n            );\n            if (__slideVideoInfo) {\n                this.resizeVideoSlide(this.index, this.currentImageSize);\n            }\n            if (this.zoomFromOrigin && !this.isDummyImageRemoved) {\n                const imgStyle = this.getDummyImgStyles(this.currentImageSize);\n                this.outer\n                    .find('.lg-current .lg-dummy-img')\n                    .first()\n                    .attr('style', imgStyle);\n            }\n            this.LGel.trigger(lGEvents.containerResize);\n        }\n    }\n\n    resizeVideoSlide(index: number, imageSize?: ImageSize): void {\n        const lgVideoStyle = this.getVideoContStyle(imageSize);\n        const currentSlide = this.getSlideItem(index);\n        currentSlide.find('.lg-video-cont').attr('style', lgVideoStyle);\n    }\n\n    /**\n     * Update slides dynamically.\n     * Add, edit or delete slides dynamically when lightGallery is opened.\n     * Modify the current gallery items and pass it via updateSlides method\n     * @note\n     * - Do not mutate existing lightGallery items directly.\n     * - Always pass new list of gallery items\n     * - You need to take care of thumbnails outside the gallery if any\n     * - user this method only if you want to update slides when the gallery is opened. Otherwise, use `refresh()` method.\n     * @param items Gallery items\n     * @param index After the update operation, which slide gallery should navigate to\n     * @category lGPublicMethods\n     * @example\n     * const plugin = lightGallery();\n     *\n     * // Adding slides dynamically\n     * let galleryItems = [\n     * // Access existing lightGallery items\n     * // galleryItems are automatically generated internally from the gallery HTML markup\n     * // or directly from galleryItems when dynamic gallery is used\n     *   ...plugin.galleryItems,\n     *     ...[\n     *       {\n     *         src: 'img/img-1.png',\n     *           thumb: 'img/thumb1.png',\n     *         },\n     *     ],\n     *   ];\n     *   plugin.updateSlides(\n     *     galleryItems,\n     *     plugin.index,\n     *   );\n     *\n     *\n     * // Remove slides dynamically\n     * galleryItems = JSON.parse(\n     *   JSON.stringify(updateSlideInstance.galleryItems),\n     * );\n     * galleryItems.shift();\n     * updateSlideInstance.updateSlides(galleryItems, 1);\n     * @see <a href=\"/demos/update-slides/\">Demo</a>\n     */\n    updateSlides(items: GalleryItem[], index: number): void {\n        if (this.index > items.length - 1) {\n            this.index = items.length - 1;\n        }\n        if (items.length === 1) {\n            this.index = 0;\n        }\n        if (!items.length) {\n            this.closeGallery();\n            return;\n        }\n        const currentSrc = this.galleryItems[index].src;\n        this.galleryItems = items;\n        this.updateControls();\n        this.$inner.empty();\n        this.currentItemsInDom = [];\n\n        let _index = 0;\n        // Find the current index based on source value of the slide\n        this.galleryItems.some((galleryItem, itemIndex) => {\n            if (galleryItem.src === currentSrc) {\n                _index = itemIndex;\n                return true;\n            }\n            return false;\n        });\n\n        this.currentItemsInDom = this.organizeSlideItems(_index, -1);\n        this.loadContent(_index, true);\n        this.getSlideItem(_index).addClass('lg-current');\n\n        this.index = _index;\n        this.updateCurrentCounter(_index);\n        this.LGel.trigger(lGEvents.updateSlides);\n    }\n\n    // Get gallery items based on multiple conditions\n    getItems(): GalleryItem[] {\n        // Gallery items\n        this.items = [];\n        if (!this.settings.dynamic) {\n            if (this.settings.selector === 'this') {\n                this.items.push(this.el);\n            } else if (this.settings.selector) {\n                if (typeof this.settings.selector === 'string') {\n                    if (this.settings.selectWithin) {\n                        const selectWithin = $LG(this.settings.selectWithin);\n                        this.items = selectWithin\n                            .find(this.settings.selector)\n                            .get();\n                    } else {\n                        this.items = this.el.querySelectorAll(\n                            this.settings.selector,\n                        );\n                    }\n                } else {\n                    this.items = this.settings.selector;\n                }\n            } else {\n                this.items = this.el.children;\n            }\n            return utils.getDynamicOptions(\n                this.items,\n                this.settings.extraProps,\n                this.settings.getCaptionFromTitleOrAlt,\n                this.settings.exThumbImage,\n            );\n        } else {\n            return this.settings.dynamicEl || [];\n        }\n    }\n\n    shouldHideScrollbar(): boolean {\n        return (\n            this.settings.hideScrollbar &&\n            document.body === this.settings.container\n        );\n    }\n\n    hideScrollbar(): void {\n        if (!this.shouldHideScrollbar()) {\n            return;\n        }\n        this.bodyPaddingRight = parseFloat($LG('body').style().paddingRight);\n        const bodyRect = document.documentElement.getBoundingClientRect();\n        const scrollbarWidth = window.innerWidth - bodyRect.width;\n\n        $LG(document.body).css(\n            'padding-right',\n            scrollbarWidth + this.bodyPaddingRight + 'px',\n        );\n        $LG(document.body).addClass('lg-overlay-open');\n    }\n\n    resetScrollBar(): void {\n        if (!this.shouldHideScrollbar()) {\n            return;\n        }\n        $LG(document.body).css('padding-right', this.bodyPaddingRight + 'px');\n        $LG(document.body).removeClass('lg-overlay-open');\n    }\n\n    /**\n     * Open lightGallery.\n     * Open gallery with specific slide by passing index of the slide as parameter.\n     * @category lGPublicMethods\n     * @param {Number} index  - index of the slide\n     * @param {HTMLElement} element - Which image lightGallery should zoom from\n     *\n     * @example\n     * const $dynamicGallery = document.getElementById('dynamic-gallery-demo');\n     * const dynamicGallery = lightGallery($dynamicGallery, {\n     *     dynamic: true,\n     *     dynamicEl: [\n     *         {\n     *              src: 'img/1.jpg',\n     *              thumb: 'img/thumb-1.jpg',\n     *              subHtml: '<h4>Image 1 title</h4><p>Image 1 descriptions.</p>',\n     *         },\n     *         ...\n     *     ],\n     * });\n     * $dynamicGallery.addEventListener('click', function () {\n     *     // Starts with third item.(Optional).\n     *     // This is useful if you want use dynamic mode with\n     *     // custom thumbnails (thumbnails outside gallery),\n     *     dynamicGallery.openGallery(2);\n     * });\n     *\n     */\n    openGallery(index = this.settings.index, element?: HTMLElement): void {\n        // prevent accidental double execution\n        if (this.lgOpened) return;\n        this.lgOpened = true;\n        this.outer.removeClass('lg-hide-items');\n\n        this.hideScrollbar();\n\n        // Add display block, but still has opacity 0\n        this.$container.addClass('lg-show');\n\n        const itemsToBeInsertedToDom = this.getItemsToBeInsertedToDom(\n            index,\n            index,\n        );\n        this.currentItemsInDom = itemsToBeInsertedToDom;\n\n        let items = '';\n        itemsToBeInsertedToDom.forEach((item) => {\n            items = items + `<div id=\"${item}\" class=\"lg-item\"></div>`;\n        });\n\n        this.$inner.append(items);\n        this.addHtml(index);\n        let transform: string | undefined = '';\n        this.mediaContainerPosition = this.getMediaContainerPosition();\n        const { top, bottom } = this.mediaContainerPosition;\n        if (!this.settings.allowMediaOverlap) {\n            this.setMediaContainerPosition(top, bottom);\n        }\n        const { __slideVideoInfo } = this.galleryItems[index];\n        if (this.zoomFromOrigin && element) {\n            this.currentImageSize = utils.getSize(\n                element,\n                this.outer,\n                top + bottom,\n                __slideVideoInfo && this.settings.videoMaxSize,\n            );\n            transform = utils.getTransform(\n                element,\n                this.outer,\n                top,\n                bottom,\n                this.currentImageSize,\n            );\n        }\n        if (!this.zoomFromOrigin || !transform) {\n            this.outer.addClass(this.settings.startClass);\n            this.getSlideItem(index).removeClass('lg-complete');\n        }\n        const timeout = this.settings.zoomFromOrigin\n            ? 100\n            : this.settings.backdropDuration;\n        setTimeout(() => {\n            this.outer.addClass('lg-components-open');\n        }, timeout);\n        this.index = index;\n        this.LGel.trigger(lGEvents.beforeOpen);\n\n        // add class lg-current to remove initial transition\n        this.getSlideItem(index).addClass('lg-current');\n\n        this.lGalleryOn = false;\n        // Store the current scroll top value to scroll back after closing the gallery..\n        this.prevScrollTop = $LG(window).scrollTop();\n\n        setTimeout(() => {\n            // Need to check both zoomFromOrigin and transform values as we need to set set the\n            // default opening animation if user missed to add the lg-size attribute\n\n            if (this.zoomFromOrigin && transform) {\n                const currentSlide = this.getSlideItem(index);\n                currentSlide.css('transform', transform);\n                setTimeout(() => {\n                    currentSlide\n                        .addClass('lg-start-progress lg-start-end-progress')\n                        .css(\n                            'transition-duration',\n                            this.settings.startAnimationDuration + 'ms',\n                        );\n                    this.outer.addClass('lg-zoom-from-image');\n                });\n                setTimeout(() => {\n                    currentSlide.css('transform', 'translate3d(0, 0, 0)');\n                }, 100);\n            }\n\n            setTimeout(() => {\n                this.$backdrop.addClass('in');\n                this.$container.addClass('lg-show-in');\n            }, 10);\n\n            setTimeout(() => {\n                if (\n                    this.settings.trapFocus &&\n                    document.body === this.settings.container\n                ) {\n                    this.trapFocus();\n                }\n            }, this.settings.backdropDuration + 50);\n\n            // lg-visible class resets gallery opacity to 1\n            if (!this.zoomFromOrigin || !transform) {\n                setTimeout(() => {\n                    this.outer.addClass('lg-visible');\n                }, this.settings.backdropDuration);\n            }\n\n            // initiate slide function\n            this.slide(index, false, false, false);\n\n            this.LGel.trigger(lGEvents.afterOpen);\n        });\n\n        if (document.body === this.settings.container) {\n            $LG('html').addClass('lg-on');\n        }\n    }\n\n    /**\n     * Note - Changing the position of the media on every slide transition creates a flickering effect.\n     * Therefore, The height of the caption is calculated dynamically, only once based on the first slide caption.\n     * if you have dynamic captions for each media,\n     * you can provide an appropriate height for the captions via allowMediaOverlap option\n     */\n    public getMediaContainerPosition(): MediaContainerPosition {\n        if (this.settings.allowMediaOverlap) {\n            return {\n                top: 0,\n                bottom: 0,\n            };\n        }\n        const top = this.$toolbar.get().clientHeight || 0;\n        const subHtml = this.outer.find('.lg-components .lg-sub-html').get();\n        const captionHeight =\n            this.settings.defaultCaptionHeight ||\n            (subHtml && subHtml.clientHeight) ||\n            0;\n        const thumbContainer = this.outer.find('.lg-thumb-outer').get();\n        const thumbHeight = thumbContainer ? thumbContainer.clientHeight : 0;\n        const bottom = thumbHeight + captionHeight;\n        return {\n            top,\n            bottom,\n        };\n    }\n\n    private setMediaContainerPosition(top = 0, bottom = 0): void {\n        this.$content.css('top', top + 'px').css('bottom', bottom + 'px');\n    }\n\n    hideBars(): void {\n        // Hide controllers if mouse doesn't move for some period\n        setTimeout(() => {\n            this.outer.removeClass('lg-hide-items');\n            if (this.settings.hideBarsDelay > 0) {\n                this.outer.on('mousemove.lg click.lg touchstart.lg', () => {\n                    this.outer.removeClass('lg-hide-items');\n\n                    clearTimeout(this.hideBarTimeout);\n\n                    // Timeout will be cleared on each slide movement also\n                    this.hideBarTimeout = setTimeout(() => {\n                        this.outer.addClass('lg-hide-items');\n                    }, this.settings.hideBarsDelay);\n                });\n                this.outer.trigger('mousemove.lg');\n            }\n        }, this.settings.showBarsAfter);\n    }\n\n    initPictureFill($img: lgQuery): void {\n        if (this.settings.supportLegacyBrowser) {\n            try {\n                picturefill({\n                    elements: [$img.get()],\n                });\n            } catch (e) {\n                console.warn(\n                    'lightGallery :- If you want srcset or picture tag to be supported for older browser please include picturefil javascript library in your document.',\n                );\n            }\n        }\n    }\n\n    /**\n     *  @desc Create image counter\n     *  Ex: 1/10\n     */\n    counter(): void {\n        if (this.settings.counter) {\n            const counterHtml = `<div class=\"lg-counter\" role=\"status\" aria-live=\"polite\">\n                <span id=\"${this.getIdName(\n                    'lg-counter-current',\n                )}\" class=\"lg-counter-current\">${this.index + 1} </span> /\n                <span id=\"${this.getIdName(\n                    'lg-counter-all',\n                )}\" class=\"lg-counter-all\">${\n                this.galleryItems.length\n            } </span></div>`;\n            this.outer.find(this.settings.appendCounterTo).append(counterHtml);\n        }\n    }\n\n    /**\n     *  @desc add sub-html into the slide\n     *  @param {Number} index - index of the slide\n     */\n    addHtml(index: number): void {\n        let subHtml;\n        let subHtmlUrl;\n        if (this.galleryItems[index].subHtmlUrl) {\n            subHtmlUrl = this.galleryItems[index].subHtmlUrl;\n        } else {\n            subHtml = this.galleryItems[index].subHtml;\n        }\n\n        if (!subHtmlUrl) {\n            if (subHtml) {\n                // get first letter of sub-html\n                // if first letter starts with . or # get the html form the jQuery object\n                const fL = subHtml.substring(0, 1);\n                if (fL === '.' || fL === '#') {\n                    if (\n                        this.settings.subHtmlSelectorRelative &&\n                        !this.settings.dynamic\n                    ) {\n                        subHtml = $LG(this.items)\n                            .eq(index)\n                            .find(subHtml)\n                            .first()\n                            .html();\n                    } else {\n                        subHtml = $LG(subHtml).first().html();\n                    }\n                }\n            } else {\n                subHtml = '';\n            }\n        }\n\n        if (this.settings.appendSubHtmlTo !== '.lg-item') {\n            if (subHtmlUrl) {\n                this.outer.find('.lg-sub-html').load(subHtmlUrl);\n            } else {\n                this.outer.find('.lg-sub-html').html(subHtml as string);\n            }\n        } else {\n            const currentSlide = $LG(this.getSlideItemId(index));\n            if (subHtmlUrl) {\n                currentSlide.load(subHtmlUrl);\n            } else {\n                currentSlide.append(\n                    `<div class=\"lg-sub-html\">${subHtml}</div>`,\n                );\n            }\n        }\n\n        // Add lg-empty-html class if title doesn't exist\n        if (typeof subHtml !== 'undefined' && subHtml !== null) {\n            if (subHtml === '') {\n                this.outer\n                    .find(this.settings.appendSubHtmlTo)\n                    .addClass('lg-empty-html');\n            } else {\n                this.outer\n                    .find(this.settings.appendSubHtmlTo)\n                    .removeClass('lg-empty-html');\n            }\n        }\n\n        this.LGel.trigger<AfterAppendSubHtmlDetail>(\n            lGEvents.afterAppendSubHtml,\n            {\n                index,\n            },\n        );\n    }\n\n    /**\n     *  @desc Preload slides\n     *  @param {Number} index - index of the slide\n     * @todo preload not working for the first slide, Also, should work for the first and last slide as well\n     */\n    preload(index: number): void {\n        for (let i = 1; i <= this.settings.preload; i++) {\n            if (i >= this.galleryItems.length - index) {\n                break;\n            }\n\n            this.loadContent(index + i, false);\n        }\n\n        for (let j = 1; j <= this.settings.preload; j++) {\n            if (index - j < 0) {\n                break;\n            }\n\n            this.loadContent(index - j, false);\n        }\n    }\n\n    getDummyImgStyles(imageSize?: ImageSize): string {\n        if (!imageSize) return '';\n        return `width:${imageSize.width}px;\n                margin-left: -${imageSize.width / 2}px;\n                margin-top: -${imageSize.height / 2}px;\n                height:${imageSize.height}px`;\n    }\n    getVideoContStyle(imageSize?: ImageSize): string {\n        if (!imageSize) return '';\n        return `width:${imageSize.width}px;\n                height:${imageSize.height}px`;\n    }\n\n    getDummyImageContent(\n        $currentSlide: lgQuery,\n        index: number,\n        alt: string,\n    ): string {\n        let $currentItem;\n        if (!this.settings.dynamic) {\n            $currentItem = $LG(this.items).eq(index);\n        }\n        if ($currentItem) {\n            let _dummyImgSrc;\n            if (!this.settings.exThumbImage) {\n                _dummyImgSrc = $currentItem.find('img').first().attr('src');\n            } else {\n                _dummyImgSrc = $currentItem.attr(this.settings.exThumbImage);\n            }\n            if (!_dummyImgSrc) return '';\n            const imgStyle = this.getDummyImgStyles(this.currentImageSize);\n            const dummyImgContent = `<img ${alt} style=\"${imgStyle}\" class=\"lg-dummy-img\" src=\"${_dummyImgSrc}\" />`;\n\n            $currentSlide.addClass('lg-first-slide');\n            this.outer.addClass('lg-first-slide-loading');\n\n            return dummyImgContent;\n        }\n        return '';\n    }\n\n    setImgMarkup(src: string, $currentSlide: lgQuery, index: number): void {\n        const currentGalleryItem = this.galleryItems[index];\n        const { alt, srcset, sizes, sources } = currentGalleryItem;\n\n        // Use the thumbnail as dummy image which will be resized to actual image size and\n        // displayed on top of actual image\n        let imgContent = '';\n        const altAttr = alt ? 'alt=\"' + alt + '\"' : '';\n\n        if (this.isFirstSlideWithZoomAnimation()) {\n            imgContent = this.getDummyImageContent(\n                $currentSlide,\n                index,\n                altAttr,\n            );\n        } else {\n            imgContent = utils.getImgMarkup(\n                index,\n                src,\n                altAttr,\n                srcset,\n                sizes,\n                sources,\n            );\n        }\n        const imgMarkup = `<picture class=\"lg-img-wrap\"> ${imgContent}</picture>`;\n        $currentSlide.prepend(imgMarkup);\n    }\n\n    onSlideObjectLoad(\n        $slide: lgQuery,\n        isHTML5VideoWithoutPoster: boolean,\n        onLoad: () => void,\n        onError: () => void,\n    ): void {\n        const mediaObject = $slide.find('.lg-object').first();\n        if (\n            utils.isImageLoaded(mediaObject.get() as HTMLImageElement) ||\n            isHTML5VideoWithoutPoster\n        ) {\n            onLoad();\n        } else {\n            mediaObject.on('load.lg error.lg', () => {\n                onLoad && onLoad();\n            });\n            mediaObject.on('error.lg', () => {\n                onError && onError();\n            });\n        }\n    }\n\n    /**\n     *\n     * @param $el Current slide item\n     * @param index\n     * @param delay Delay is 0 except first time\n     * @param speed Speed is same as delay, except it is 0 if gallery is opened via hash plugin\n     * @param isFirstSlide\n     */\n    onLgObjectLoad(\n        currentSlide: lgQuery,\n        index: number,\n        delay: number,\n        speed: number,\n        isFirstSlide: boolean,\n        isHTML5VideoWithoutPoster: boolean,\n    ): void {\n        this.onSlideObjectLoad(\n            currentSlide,\n            isHTML5VideoWithoutPoster,\n            () => {\n                this.triggerSlideItemLoad(\n                    currentSlide,\n                    index,\n                    delay,\n                    speed,\n                    isFirstSlide,\n                );\n            },\n            () => {\n                currentSlide.addClass('lg-complete lg-complete_');\n                currentSlide.html(\n                    '<span class=\"lg-error-msg\">Oops... Failed to load content...</span>',\n                );\n            },\n        );\n    }\n\n    triggerSlideItemLoad(\n        $currentSlide: lgQuery,\n        index: number,\n        delay: number,\n        speed: number,\n        isFirstSlide: boolean,\n    ): void {\n        const currentGalleryItem = this.galleryItems[index];\n\n        // Adding delay for video slides without poster for better performance and user experience\n        // Videos should start playing once once the gallery is completely loaded\n        const _speed =\n            isFirstSlide &&\n            this.getSlideType(currentGalleryItem) === 'video' &&\n            !currentGalleryItem.poster\n                ? speed\n                : 0;\n        setTimeout(() => {\n            $currentSlide.addClass('lg-complete lg-complete_');\n            this.LGel.trigger<SlideItemLoadDetail>(lGEvents.slideItemLoad, {\n                index,\n                delay: delay || 0,\n                isFirstSlide,\n            });\n        }, _speed);\n    }\n\n    isFirstSlideWithZoomAnimation(): boolean {\n        return !!(\n            !this.lGalleryOn &&\n            this.zoomFromOrigin &&\n            this.currentImageSize\n        );\n    }\n\n    // Add video slideInfo\n    addSlideVideoInfo(items: GalleryItem[]): void {\n        items.forEach((element, index) => {\n            element.__slideVideoInfo = utils.isVideo(\n                element.src as string,\n                !!element.video,\n                index,\n            );\n            if (\n                element.__slideVideoInfo &&\n                this.settings.loadYouTubePoster &&\n                !element.poster &&\n                element.__slideVideoInfo.youtube\n            ) {\n                element.poster = `//img.youtube.com/vi/${element.__slideVideoInfo.youtube[1]}/maxresdefault.jpg`;\n            }\n        });\n    }\n\n    /**\n     *  Load slide content into slide.\n     *  This is used to load content into slides that is not visible too\n     *  @param {Number} index - index of the slide.\n     *  @param {Boolean} rec - if true call loadcontent() function again.\n     */\n    loadContent(index: number, rec: boolean): void {\n        const currentGalleryItem = this.galleryItems[index];\n        const $currentSlide = $LG(this.getSlideItemId(index));\n\n        const { poster, srcset, sizes, sources } = currentGalleryItem;\n        let { src } = currentGalleryItem;\n\n        const video = currentGalleryItem.video;\n\n        const _html5Video =\n            video && typeof video === 'string' ? JSON.parse(video) : video;\n\n        if (currentGalleryItem.responsive) {\n            const srcDyItms = currentGalleryItem.responsive.split(',');\n            src = utils.getResponsiveSrc(srcDyItms) || src;\n        }\n\n        const videoInfo = currentGalleryItem.__slideVideoInfo;\n        let lgVideoStyle = '';\n\n        const iframe = !!currentGalleryItem.iframe;\n\n        const isFirstSlide = !this.lGalleryOn;\n\n        // delay for adding complete class. it is 0 except first time.\n        let delay = 0;\n        if (isFirstSlide) {\n            if (this.zoomFromOrigin && this.currentImageSize) {\n                delay = this.settings.startAnimationDuration + 10;\n            } else {\n                delay = this.settings.backdropDuration + 10;\n            }\n        }\n\n        if (!$currentSlide.hasClass('lg-loaded')) {\n            if (videoInfo) {\n                const { top, bottom } = this.mediaContainerPosition;\n                const videoSize = utils.getSize(\n                    this.items[index],\n                    this.outer,\n                    top + bottom,\n                    videoInfo && this.settings.videoMaxSize,\n                );\n                lgVideoStyle = this.getVideoContStyle(videoSize);\n            }\n            if (iframe) {\n                const markup = utils.getIframeMarkup(\n                    this.settings.iframeWidth,\n                    this.settings.iframeHeight,\n                    this.settings.iframeMaxWidth,\n                    this.settings.iframeMaxHeight,\n                    src,\n                    currentGalleryItem.iframeTitle,\n                );\n                $currentSlide.prepend(markup);\n            } else if (poster) {\n                let dummyImg = '';\n                const hasStartAnimation =\n                    isFirstSlide &&\n                    this.zoomFromOrigin &&\n                    this.currentImageSize;\n                if (hasStartAnimation) {\n                    dummyImg = this.getDummyImageContent(\n                        $currentSlide,\n                        index,\n                        '',\n                    );\n                }\n\n                const markup = utils.getVideoPosterMarkup(\n                    poster,\n                    dummyImg || '',\n                    lgVideoStyle,\n                    this.settings.strings['playVideo'],\n                    videoInfo,\n                );\n                $currentSlide.prepend(markup);\n            } else if (videoInfo) {\n                const markup = `<div class=\"lg-video-cont \" style=\"${lgVideoStyle}\"></div>`;\n                $currentSlide.prepend(markup);\n            } else {\n                this.setImgMarkup(src as string, $currentSlide, index);\n                if (srcset || sources) {\n                    const $img = $currentSlide.find('.lg-object');\n                    this.initPictureFill($img);\n                }\n            }\n            if (poster || videoInfo) {\n                this.LGel.trigger(lGEvents.hasVideo, {\n                    index,\n                    src: src,\n                    html5Video: _html5Video,\n                    hasPoster: !!poster,\n                });\n            }\n\n            this.LGel.trigger<AfterAppendSlideEventDetail>(\n                lGEvents.afterAppendSlide,\n                { index },\n            );\n\n            if (\n                this.lGalleryOn &&\n                this.settings.appendSubHtmlTo === '.lg-item'\n            ) {\n                this.addHtml(index);\n            }\n        }\n\n        // For first time add some delay for displaying the start animation.\n        let _speed = 0;\n\n        // Do not change the delay value because it is required for zoom plugin.\n        // If gallery opened from direct url (hash) speed value should be 0\n        if (delay && !$LG(document.body).hasClass('lg-from-hash')) {\n            _speed = delay;\n        }\n\n        // Only for first slide and zoomFromOrigin is enabled\n        if (this.isFirstSlideWithZoomAnimation()) {\n            setTimeout(() => {\n                $currentSlide\n                    .removeClass('lg-start-end-progress lg-start-progress')\n                    .removeAttr('style');\n            }, this.settings.startAnimationDuration + 100);\n            if (!$currentSlide.hasClass('lg-loaded')) {\n                setTimeout(() => {\n                    if (this.getSlideType(currentGalleryItem) === 'image') {\n                        const { alt } = currentGalleryItem;\n                        const altAttr = alt ? 'alt=\"' + alt + '\"' : '';\n\n                        $currentSlide\n                            .find('.lg-img-wrap')\n                            .append(\n                                utils.getImgMarkup(\n                                    index,\n                                    src as string,\n                                    altAttr,\n                                    srcset,\n                                    sizes,\n                                    currentGalleryItem.sources,\n                                ),\n                            );\n                        if (srcset || sources) {\n                            const $img = $currentSlide.find('.lg-object');\n                            this.initPictureFill($img);\n                        }\n                    }\n                    if (\n                        this.getSlideType(currentGalleryItem) === 'image' ||\n                        (this.getSlideType(currentGalleryItem) === 'video' &&\n                            poster)\n                    ) {\n                        this.onLgObjectLoad(\n                            $currentSlide,\n                            index,\n                            delay,\n                            _speed,\n                            true,\n                            false,\n                        );\n\n                        // load remaining slides once the slide is completely loaded\n                        this.onSlideObjectLoad(\n                            $currentSlide,\n                            !!(videoInfo && videoInfo.html5 && !poster),\n                            () => {\n                                this.loadContentOnFirstSlideLoad(\n                                    index,\n                                    $currentSlide,\n                                    _speed,\n                                );\n                            },\n                            () => {\n                                this.loadContentOnFirstSlideLoad(\n                                    index,\n                                    $currentSlide,\n                                    _speed,\n                                );\n                            },\n                        );\n                    }\n                }, this.settings.startAnimationDuration + 100);\n            }\n        }\n\n        // SLide content has been added to dom\n        $currentSlide.addClass('lg-loaded');\n\n        if (\n            !this.isFirstSlideWithZoomAnimation() ||\n            (this.getSlideType(currentGalleryItem) === 'video' && !poster)\n        ) {\n            this.onLgObjectLoad(\n                $currentSlide,\n                index,\n                delay,\n                _speed,\n                isFirstSlide,\n                !!(videoInfo && videoInfo.html5 && !poster),\n            );\n        }\n\n        // When gallery is opened once content is loaded (second time) need to add lg-complete class for css styling\n        if (\n            (!this.zoomFromOrigin || !this.currentImageSize) &&\n            $currentSlide.hasClass('lg-complete_') &&\n            !this.lGalleryOn\n        ) {\n            setTimeout(() => {\n                $currentSlide.addClass('lg-complete');\n            }, this.settings.backdropDuration);\n        }\n\n        // Content loaded\n        // Need to set lGalleryOn before calling preload function\n        this.lGalleryOn = true;\n\n        if (rec === true) {\n            if (!$currentSlide.hasClass('lg-complete_')) {\n                $currentSlide\n                    .find('.lg-object')\n                    .first()\n                    .on('load.lg error.lg', () => {\n                        this.preload(index);\n                    });\n            } else {\n                this.preload(index);\n            }\n        }\n    }\n\n    /**\n     * @desc Remove dummy image content and load next slides\n     * Called only for the first time if zoomFromOrigin animation is enabled\n     * @param index\n     * @param $currentSlide\n     * @param speed\n     */\n    loadContentOnFirstSlideLoad(\n        index: number,\n        $currentSlide: lgQuery,\n        speed: number,\n    ): void {\n        setTimeout(() => {\n            $currentSlide.find('.lg-dummy-img').remove();\n            $currentSlide.removeClass('lg-first-slide');\n            this.outer.removeClass('lg-first-slide-loading');\n            this.isDummyImageRemoved = true;\n            this.preload(index);\n        }, speed + 300);\n    }\n\n    getItemsToBeInsertedToDom(\n        index: number,\n        prevIndex: number,\n        numberOfItems = 0,\n    ): string[] {\n        const itemsToBeInsertedToDom: string[] = [];\n        // Minimum 2 items should be there\n        let possibleNumberOfItems = Math.max(numberOfItems, 3);\n        possibleNumberOfItems = Math.min(\n            possibleNumberOfItems,\n            this.galleryItems.length,\n        );\n        const prevIndexItem = `lg-item-${this.lgId}-${prevIndex}`;\n        if (this.galleryItems.length <= 3) {\n            this.galleryItems.forEach((_element, index) => {\n                itemsToBeInsertedToDom.push(`lg-item-${this.lgId}-${index}`);\n            });\n            return itemsToBeInsertedToDom;\n        }\n\n        if (index < (this.galleryItems.length - 1) / 2) {\n            for (\n                let idx = index;\n                idx > index - possibleNumberOfItems / 2 && idx >= 0;\n                idx--\n            ) {\n                itemsToBeInsertedToDom.push(`lg-item-${this.lgId}-${idx}`);\n            }\n            const numberOfExistingItems = itemsToBeInsertedToDom.length;\n            for (\n                let idx = 0;\n                idx < possibleNumberOfItems - numberOfExistingItems;\n                idx++\n            ) {\n                itemsToBeInsertedToDom.push(\n                    `lg-item-${this.lgId}-${index + idx + 1}`,\n                );\n            }\n        } else {\n            for (\n                let idx = index;\n                idx <= this.galleryItems.length - 1 &&\n                idx < index + possibleNumberOfItems / 2;\n                idx++\n            ) {\n                itemsToBeInsertedToDom.push(`lg-item-${this.lgId}-${idx}`);\n            }\n            const numberOfExistingItems = itemsToBeInsertedToDom.length;\n            for (\n                let idx = 0;\n                idx < possibleNumberOfItems - numberOfExistingItems;\n                idx++\n            ) {\n                itemsToBeInsertedToDom.push(\n                    `lg-item-${this.lgId}-${index - idx - 1}`,\n                );\n            }\n        }\n        if (this.settings.loop) {\n            if (index === this.galleryItems.length - 1) {\n                itemsToBeInsertedToDom.push(`lg-item-${this.lgId}-${0}`);\n            } else if (index === 0) {\n                itemsToBeInsertedToDom.push(\n                    `lg-item-${this.lgId}-${this.galleryItems.length - 1}`,\n                );\n            }\n        }\n        if (itemsToBeInsertedToDom.indexOf(prevIndexItem) === -1) {\n            itemsToBeInsertedToDom.push(`lg-item-${this.lgId}-${prevIndex}`);\n        }\n\n        return itemsToBeInsertedToDom;\n    }\n\n    organizeSlideItems(index: number, prevIndex: number): string[] {\n        const itemsToBeInsertedToDom = this.getItemsToBeInsertedToDom(\n            index,\n            prevIndex,\n            this.settings.numberOfSlideItemsInDom,\n        );\n\n        itemsToBeInsertedToDom.forEach((item) => {\n            if (this.currentItemsInDom.indexOf(item) === -1) {\n                this.$inner.append(`<div id=\"${item}\" class=\"lg-item\"></div>`);\n            }\n        });\n\n        this.currentItemsInDom.forEach((item) => {\n            if (itemsToBeInsertedToDom.indexOf(item) === -1) {\n                $LG(`#${item}`).remove();\n            }\n        });\n        return itemsToBeInsertedToDom;\n    }\n\n    /**\n     * Get previous index of the slide\n     */\n    getPreviousSlideIndex(): number {\n        let prevIndex = 0;\n        try {\n            const currentItemId = this.outer\n                .find('.lg-current')\n                .first()\n                .attr('id');\n            prevIndex = parseInt(currentItemId.split('-')[3]) || 0;\n        } catch (error) {\n            prevIndex = 0;\n        }\n        return prevIndex;\n    }\n\n    setDownloadValue(index: number): void {\n        if (this.settings.download) {\n            const currentGalleryItem = this.galleryItems[index];\n            const hideDownloadBtn =\n                currentGalleryItem.downloadUrl === false ||\n                currentGalleryItem.downloadUrl === 'false';\n            if (hideDownloadBtn) {\n                this.outer.addClass('lg-hide-download');\n            } else {\n                const $download = this.getElementById('lg-download');\n                this.outer.removeClass('lg-hide-download');\n                $download.attr(\n                    'href',\n                    currentGalleryItem.downloadUrl ||\n                        (currentGalleryItem.src as string),\n                );\n                if (currentGalleryItem.download) {\n                    $download.attr('download', currentGalleryItem.download);\n                }\n            }\n        }\n    }\n\n    makeSlideAnimation(\n        direction: 'next' | 'prev',\n        currentSlideItem: lgQuery,\n        previousSlideItem: lgQuery,\n    ): void {\n        if (this.lGalleryOn) {\n            previousSlideItem.addClass('lg-slide-progress');\n        }\n        setTimeout(\n            () => {\n                // remove all transitions\n                this.outer.addClass('lg-no-trans');\n\n                this.outer\n                    .find('.lg-item')\n                    .removeClass('lg-prev-slide lg-next-slide');\n\n                if (direction === 'prev') {\n                    //prevslide\n                    currentSlideItem.addClass('lg-prev-slide');\n                    previousSlideItem.addClass('lg-next-slide');\n                } else {\n                    // next slide\n                    currentSlideItem.addClass('lg-next-slide');\n                    previousSlideItem.addClass('lg-prev-slide');\n                }\n\n                // give 50 ms for browser to add/remove class\n                setTimeout(() => {\n                    this.outer.find('.lg-item').removeClass('lg-current');\n\n                    currentSlideItem.addClass('lg-current');\n\n                    // reset all transitions\n                    this.outer.removeClass('lg-no-trans');\n                }, 50);\n            },\n            this.lGalleryOn ? this.settings.slideDelay : 0,\n        );\n    }\n\n    /**\n     * Goto a specific slide.\n     * @param {Number} index - index of the slide\n     * @param {Boolean} fromTouch - true if slide function called via touch event or mouse drag\n     * @param {Boolean} fromThumb - true if slide function called via thumbnail click\n     * @param {String} direction - Direction of the slide(next/prev)\n     * @category lGPublicMethods\n     * @example\n     *  const plugin = lightGallery();\n     *  // to go to 3rd slide\n     *  plugin.slide(2);\n     *\n     */\n    slide(\n        index: number,\n        fromTouch?: boolean,\n        fromThumb?: boolean,\n        direction?: SlideDirection | false,\n    ): void {\n        const prevIndex = this.getPreviousSlideIndex();\n        this.currentItemsInDom = this.organizeSlideItems(index, prevIndex);\n\n        // Prevent multiple call, Required for hsh plugin\n        if (this.lGalleryOn && prevIndex === index) {\n            return;\n        }\n\n        const numberOfGalleryItems = this.galleryItems.length;\n\n        if (!this.lgBusy) {\n            if (this.settings.counter) {\n                this.updateCurrentCounter(index);\n            }\n\n            const currentSlideItem = this.getSlideItem(index);\n            const previousSlideItem = this.getSlideItem(prevIndex);\n\n            const currentGalleryItem = this.galleryItems[index];\n            const videoInfo = currentGalleryItem.__slideVideoInfo;\n\n            this.outer.attr(\n                'data-lg-slide-type',\n                this.getSlideType(currentGalleryItem),\n            );\n            this.setDownloadValue(index);\n\n            if (videoInfo) {\n                const { top, bottom } = this.mediaContainerPosition;\n                const videoSize = utils.getSize(\n                    this.items[index],\n                    this.outer,\n                    top + bottom,\n                    videoInfo && this.settings.videoMaxSize,\n                );\n                this.resizeVideoSlide(index, videoSize);\n            }\n\n            this.LGel.trigger<BeforeSlideDetail>(lGEvents.beforeSlide, {\n                prevIndex,\n                index,\n                fromTouch: !!fromTouch,\n                fromThumb: !!fromThumb,\n            });\n\n            this.lgBusy = true;\n\n            clearTimeout(this.hideBarTimeout);\n\n            this.arrowDisable(index);\n\n            if (!direction) {\n                if (index < prevIndex) {\n                    direction = 'prev';\n                } else if (index > prevIndex) {\n                    direction = 'next';\n                }\n            }\n\n            if (!fromTouch) {\n                this.makeSlideAnimation(\n                    direction as SlideDirection,\n                    currentSlideItem,\n                    previousSlideItem,\n                );\n            } else {\n                this.outer\n                    .find('.lg-item')\n                    .removeClass('lg-prev-slide lg-current lg-next-slide');\n                let touchPrev;\n                let touchNext;\n                if (numberOfGalleryItems > 2) {\n                    touchPrev = index - 1;\n                    touchNext = index + 1;\n\n                    if (index === 0 && prevIndex === numberOfGalleryItems - 1) {\n                        // next slide\n                        touchNext = 0;\n                        touchPrev = numberOfGalleryItems - 1;\n                    } else if (\n                        index === numberOfGalleryItems - 1 &&\n                        prevIndex === 0\n                    ) {\n                        // prev slide\n                        touchNext = 0;\n                        touchPrev = numberOfGalleryItems - 1;\n                    }\n                } else {\n                    touchPrev = 0;\n                    touchNext = 1;\n                }\n\n                if (direction === 'prev') {\n                    this.getSlideItem(touchNext).addClass('lg-next-slide');\n                } else {\n                    this.getSlideItem(touchPrev).addClass('lg-prev-slide');\n                }\n\n                currentSlideItem.addClass('lg-current');\n            }\n\n            // Do not put load content in set timeout as it needs to load immediately when the gallery is opened\n            if (!this.lGalleryOn) {\n                this.loadContent(index, true);\n            } else {\n                setTimeout(() => {\n                    this.loadContent(index, true);\n                    // Add title if this.settings.appendSubHtmlTo === lg-sub-html\n                    if (this.settings.appendSubHtmlTo !== '.lg-item') {\n                        this.addHtml(index);\n                    }\n                }, this.settings.speed + 50 + (fromTouch ? 0 : this.settings.slideDelay));\n            }\n\n            setTimeout(() => {\n                this.lgBusy = false;\n                previousSlideItem.removeClass('lg-slide-progress');\n                this.LGel.trigger(lGEvents.afterSlide, {\n                    prevIndex: prevIndex,\n                    index,\n                    fromTouch,\n                    fromThumb,\n                });\n            }, (this.lGalleryOn ? this.settings.speed + 100 : 100) + (fromTouch ? 0 : this.settings.slideDelay));\n        }\n\n        this.index = index;\n    }\n\n    updateCurrentCounter(index: number): void {\n        this.getElementById('lg-counter-current').html(index + 1 + '');\n    }\n\n    updateCounterTotal(): void {\n        this.getElementById('lg-counter-all').html(\n            this.galleryItems.length + '',\n        );\n    }\n\n    getSlideType(item: GalleryItem): 'video' | 'iframe' | 'image' {\n        if (item.__slideVideoInfo) {\n            return 'video';\n        } else if (item.iframe) {\n            return 'iframe';\n        } else {\n            return 'image';\n        }\n    }\n\n    touchMove(startCoords: Coords, endCoords: Coords, e?: TouchEvent): void {\n        const distanceX = endCoords.pageX - startCoords.pageX;\n        const distanceY = endCoords.pageY - startCoords.pageY;\n        let allowSwipe = false;\n\n        if (this.swipeDirection) {\n            allowSwipe = true;\n        } else {\n            if (Math.abs(distanceX) > 15) {\n                this.swipeDirection = 'horizontal';\n                allowSwipe = true;\n            } else if (Math.abs(distanceY) > 15) {\n                this.swipeDirection = 'vertical';\n                allowSwipe = true;\n            }\n        }\n\n        if (!allowSwipe) {\n            return;\n        }\n\n        const $currentSlide = this.getSlideItem(this.index);\n\n        if (this.swipeDirection === 'horizontal') {\n            e?.preventDefault();\n            // reset opacity and transition duration\n            this.outer.addClass('lg-dragging');\n\n            // move current slide\n            this.setTranslate($currentSlide, distanceX, 0);\n\n            // move next and prev slide with current slide\n            const width = $currentSlide.get().offsetWidth;\n            const slideWidthAmount = (width * 15) / 100;\n            const gutter = slideWidthAmount - Math.abs((distanceX * 10) / 100);\n            this.setTranslate(\n                this.outer.find('.lg-prev-slide').first(),\n                -width + distanceX - gutter,\n                0,\n            );\n\n            this.setTranslate(\n                this.outer.find('.lg-next-slide').first(),\n                width + distanceX + gutter,\n                0,\n            );\n        } else if (this.swipeDirection === 'vertical') {\n            if (this.settings.swipeToClose) {\n                e?.preventDefault();\n                this.$container.addClass('lg-dragging-vertical');\n\n                const opacity = 1 - Math.abs(distanceY) / window.innerHeight;\n                this.$backdrop.css('opacity', opacity);\n\n                const scale = 1 - Math.abs(distanceY) / (window.innerWidth * 2);\n                this.setTranslate($currentSlide, 0, distanceY, scale, scale);\n                if (Math.abs(distanceY) > 100) {\n                    this.outer\n                        .addClass('lg-hide-items')\n                        .removeClass('lg-components-open');\n                }\n            }\n        }\n    }\n\n    touchEnd(endCoords: Coords, startCoords: Coords, event: TouchEvent): void {\n        let distance;\n\n        // keep slide animation for any mode while dragg/swipe\n        if (this.settings.mode !== 'lg-slide') {\n            this.outer.addClass('lg-slide');\n        }\n\n        // set transition duration\n        setTimeout(() => {\n            this.$container.removeClass('lg-dragging-vertical');\n            this.outer\n                .removeClass('lg-dragging lg-hide-items')\n                .addClass('lg-components-open');\n\n            let triggerClick = true;\n\n            if (this.swipeDirection === 'horizontal') {\n                distance = endCoords.pageX - startCoords.pageX;\n                const distanceAbs = Math.abs(\n                    endCoords.pageX - startCoords.pageX,\n                );\n                if (\n                    distance < 0 &&\n                    distanceAbs > this.settings.swipeThreshold\n                ) {\n                    this.goToNextSlide(true);\n                    triggerClick = false;\n                } else if (\n                    distance > 0 &&\n                    distanceAbs > this.settings.swipeThreshold\n                ) {\n                    this.goToPrevSlide(true);\n                    triggerClick = false;\n                }\n            } else if (this.swipeDirection === 'vertical') {\n                distance = Math.abs(endCoords.pageY - startCoords.pageY);\n                if (\n                    this.settings.closable &&\n                    this.settings.swipeToClose &&\n                    distance > 100\n                ) {\n                    this.closeGallery();\n                    return;\n                } else {\n                    this.$backdrop.css('opacity', 1);\n                }\n            }\n            this.outer.find('.lg-item').removeAttr('style');\n\n            if (\n                triggerClick &&\n                Math.abs(endCoords.pageX - startCoords.pageX) < 5\n            ) {\n                // Trigger click if distance is less than 5 pix\n                const target = $LG(event.target);\n                if (this.isPosterElement(target)) {\n                    this.LGel.trigger(lGEvents.posterClick);\n                }\n            }\n\n            this.swipeDirection = undefined;\n        });\n\n        // remove slide class once drag/swipe is completed if mode is not slide\n        setTimeout(() => {\n            if (\n                !this.outer.hasClass('lg-dragging') &&\n                this.settings.mode !== 'lg-slide'\n            ) {\n                this.outer.removeClass('lg-slide');\n            }\n        }, this.settings.speed + 100);\n    }\n\n    enableSwipe(): void {\n        let startCoords: Coords = {} as Coords;\n        let endCoords: Coords = {} as Coords;\n        let isMoved = false;\n        let isSwiping = false;\n\n        if (this.settings.enableSwipe) {\n            this.$inner.on('touchstart.lg', (e) => {\n                this.dragOrSwipeEnabled = true;\n                const $item = this.getSlideItem(this.index);\n                if (\n                    ($LG(e.target).hasClass('lg-item') ||\n                        $item.get().contains(e.target)) &&\n                    !this.outer.hasClass('lg-zoomed') &&\n                    !this.lgBusy &&\n                    e.touches.length === 1\n                ) {\n                    isSwiping = true;\n                    this.touchAction = 'swipe';\n                    this.manageSwipeClass();\n                    startCoords = {\n                        pageX: e.touches[0].pageX,\n                        pageY: e.touches[0].pageY,\n                    };\n                }\n            });\n\n            this.$inner.on('touchmove.lg', (e) => {\n                if (\n                    isSwiping &&\n                    this.touchAction === 'swipe' &&\n                    e.touches.length === 1\n                ) {\n                    endCoords = {\n                        pageX: e.touches[0].pageX,\n                        pageY: e.touches[0].pageY,\n                    };\n                    this.touchMove(startCoords, endCoords, e);\n                    isMoved = true;\n                }\n            });\n\n            this.$inner.on('touchend.lg', (event: TouchEvent) => {\n                if (this.touchAction === 'swipe') {\n                    if (isMoved) {\n                        isMoved = false;\n                        this.touchEnd(endCoords, startCoords, event);\n                    } else if (isSwiping) {\n                        const target = $LG(event.target);\n                        if (this.isPosterElement(target)) {\n                            this.LGel.trigger(lGEvents.posterClick);\n                        }\n                    }\n                    this.touchAction = undefined;\n                    isSwiping = false;\n                }\n            });\n        }\n    }\n\n    enableDrag(): void {\n        let startCoords: Coords = {} as Coords;\n        let endCoords: Coords = {} as Coords;\n        let isDraging = false;\n        let isMoved = false;\n        if (this.settings.enableDrag) {\n            this.outer.on('mousedown.lg', (e) => {\n                this.dragOrSwipeEnabled = true;\n                const $item = this.getSlideItem(this.index);\n                if (\n                    $LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target)\n                ) {\n                    if (!this.outer.hasClass('lg-zoomed') && !this.lgBusy) {\n                        e.preventDefault();\n                        if (!this.lgBusy) {\n                            this.manageSwipeClass();\n                            startCoords = {\n                                pageX: e.pageX,\n                                pageY: e.pageY,\n                            };\n                            isDraging = true;\n\n                            // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723\n                            this.outer.get().scrollLeft += 1;\n                            this.outer.get().scrollLeft -= 1;\n\n                            // *\n\n                            this.outer\n                                .removeClass('lg-grab')\n                                .addClass('lg-grabbing');\n\n                            this.LGel.trigger(lGEvents.dragStart);\n                        }\n                    }\n                }\n            });\n\n            $LG(window).on(`mousemove.lg.global${this.lgId}`, (e) => {\n                if (isDraging && this.lgOpened) {\n                    isMoved = true;\n                    endCoords = {\n                        pageX: e.pageX,\n                        pageY: e.pageY,\n                    };\n                    this.touchMove(startCoords, endCoords);\n                    this.LGel.trigger(lGEvents.dragMove);\n                }\n            });\n\n            $LG(window).on(`mouseup.lg.global${this.lgId}`, (event) => {\n                if (!this.lgOpened) {\n                    return;\n                }\n                const target = $LG(event.target);\n                if (isMoved) {\n                    isMoved = false;\n                    this.touchEnd(endCoords, startCoords, event);\n                    this.LGel.trigger(lGEvents.dragEnd);\n                } else if (this.isPosterElement(target)) {\n                    this.LGel.trigger(lGEvents.posterClick);\n                }\n\n                // Prevent execution on click\n                if (isDraging) {\n                    isDraging = false;\n                    this.outer.removeClass('lg-grabbing').addClass('lg-grab');\n                }\n            });\n        }\n    }\n\n    triggerPosterClick(): void {\n        this.$inner.on('click.lg', (event) => {\n            if (\n                !this.dragOrSwipeEnabled &&\n                this.isPosterElement($LG(event.target))\n            ) {\n                this.LGel.trigger(lGEvents.posterClick);\n            }\n        });\n    }\n\n    manageSwipeClass(): void {\n        let _touchNext = this.index + 1;\n        let _touchPrev = this.index - 1;\n        if (this.settings.loop && this.galleryItems.length > 2) {\n            if (this.index === 0) {\n                _touchPrev = this.galleryItems.length - 1;\n            } else if (this.index === this.galleryItems.length - 1) {\n                _touchNext = 0;\n            }\n        }\n\n        this.outer.find('.lg-item').removeClass('lg-next-slide lg-prev-slide');\n        if (_touchPrev > -1) {\n            this.getSlideItem(_touchPrev).addClass('lg-prev-slide');\n        }\n\n        this.getSlideItem(_touchNext).addClass('lg-next-slide');\n    }\n\n    /**\n     * Go to next slide\n     * @param {Boolean} fromTouch - true if slide function called via touch event\n     * @category lGPublicMethods\n     * @example\n     *  const plugin = lightGallery();\n     *  plugin.goToNextSlide();\n     * @see <a href=\"/demos/methods/\">Demo</a>\n     */\n    goToNextSlide(fromTouch?: boolean): void {\n        let _loop = this.settings.loop;\n        if (fromTouch && this.galleryItems.length < 3) {\n            _loop = false;\n        }\n\n        if (!this.lgBusy) {\n            if (this.index + 1 < this.galleryItems.length) {\n                this.index++;\n                this.LGel.trigger(lGEvents.beforeNextSlide, {\n                    index: this.index,\n                });\n                this.slide(this.index, !!fromTouch, false, 'next');\n            } else {\n                if (_loop) {\n                    this.index = 0;\n                    this.LGel.trigger(lGEvents.beforeNextSlide, {\n                        index: this.index,\n                    });\n                    this.slide(this.index, !!fromTouch, false, 'next');\n                } else if (this.settings.slideEndAnimation && !fromTouch) {\n                    this.outer.addClass('lg-right-end');\n                    setTimeout(() => {\n                        this.outer.removeClass('lg-right-end');\n                    }, 400);\n                }\n            }\n        }\n    }\n\n    /**\n     * Go to previous slides\n     * @param {Boolean} fromTouch - true if slide function called via touch event\n     * @category lGPublicMethods\n     * @example\n     *  const plugin = lightGallery({});\n     *  plugin.goToPrevSlide();\n     * @see <a href=\"/demos/methods/\">Demo</a>\n     *\n     */\n    goToPrevSlide(fromTouch?: boolean): void {\n        let _loop = this.settings.loop;\n        if (fromTouch && this.galleryItems.length < 3) {\n            _loop = false;\n        }\n\n        if (!this.lgBusy) {\n            if (this.index > 0) {\n                this.index--;\n                this.LGel.trigger(lGEvents.beforePrevSlide, {\n                    index: this.index,\n                    fromTouch,\n                });\n                this.slide(this.index, !!fromTouch, false, 'prev');\n            } else {\n                if (_loop) {\n                    this.index = this.galleryItems.length - 1;\n                    this.LGel.trigger(lGEvents.beforePrevSlide, {\n                        index: this.index,\n                        fromTouch,\n                    });\n                    this.slide(this.index, !!fromTouch, false, 'prev');\n                } else if (this.settings.slideEndAnimation && !fromTouch) {\n                    this.outer.addClass('lg-left-end');\n                    setTimeout(() => {\n                        this.outer.removeClass('lg-left-end');\n                    }, 400);\n                }\n            }\n        }\n    }\n\n    keyPress(): void {\n        $LG(window).on(`keydown.lg.global${this.lgId}`, (e) => {\n            if (\n                this.lgOpened &&\n                this.settings.escKey === true &&\n                e.keyCode === 27\n            ) {\n                e.preventDefault();\n                if (\n                    this.settings.allowMediaOverlap &&\n                    this.outer.hasClass('lg-can-toggle') &&\n                    this.outer.hasClass('lg-components-open')\n                ) {\n                    this.outer.removeClass('lg-components-open');\n                } else {\n                    this.closeGallery();\n                }\n            }\n            if (this.lgOpened && this.galleryItems.length > 1) {\n                if (e.keyCode === 37) {\n                    e.preventDefault();\n                    this.goToPrevSlide();\n                }\n\n                if (e.keyCode === 39) {\n                    e.preventDefault();\n                    this.goToNextSlide();\n                }\n            }\n        });\n    }\n\n    arrow(): void {\n        this.getElementById('lg-prev').on('click.lg', () => {\n            this.goToPrevSlide();\n        });\n        this.getElementById('lg-next').on('click.lg', () => {\n            this.goToNextSlide();\n        });\n    }\n\n    arrowDisable(index: number): void {\n        // Disable arrows if settings.hideControlOnEnd is true\n        if (!this.settings.loop && this.settings.hideControlOnEnd) {\n            const $prev = this.getElementById('lg-prev');\n            const $next = this.getElementById('lg-next');\n            if (index + 1 === this.galleryItems.length) {\n                $next.attr('disabled', 'disabled').addClass('disabled');\n            } else {\n                $next.removeAttr('disabled').removeClass('disabled');\n            }\n\n            if (index === 0) {\n                $prev.attr('disabled', 'disabled').addClass('disabled');\n            } else {\n                $prev.removeAttr('disabled').removeClass('disabled');\n            }\n        }\n    }\n\n    setTranslate(\n        $el: lgQuery,\n        xValue: number,\n        yValue: number,\n        scaleX = 1,\n        scaleY = 1,\n    ): void {\n        $el.css(\n            'transform',\n            'translate3d(' +\n                xValue +\n                'px, ' +\n                yValue +\n                'px, 0px) scale3d(' +\n                scaleX +\n                ', ' +\n                scaleY +\n                ', 1)',\n        );\n    }\n\n    mousewheel(): void {\n        let lastCall = 0;\n        this.outer.on('wheel.lg', (e) => {\n            if (!e.deltaY || this.galleryItems.length < 2) {\n                return;\n            }\n            e.preventDefault();\n            const now = new Date().getTime();\n            if (now - lastCall < 1000) {\n                return;\n            }\n            lastCall = now;\n            if (e.deltaY > 0) {\n                this.goToNextSlide();\n            } else if (e.deltaY < 0) {\n                this.goToPrevSlide();\n            }\n        });\n    }\n\n    isSlideElement(target: lgQuery): boolean {\n        return (\n            target.hasClass('lg-outer') ||\n            target.hasClass('lg-item') ||\n            target.hasClass('lg-img-wrap')\n        );\n    }\n\n    isPosterElement(target: lgQuery): boolean {\n        const playButton = this.getSlideItem(this.index)\n            .find('.lg-video-play-button')\n            .get();\n        return (\n            target.hasClass('lg-video-poster') ||\n            target.hasClass('lg-video-play-button') ||\n            (playButton && playButton.contains(target.get()))\n        );\n    }\n\n    /**\n     * Maximize minimize inline gallery.\n     * @category lGPublicMethods\n     */\n    toggleMaximize(): void {\n        this.getElementById('lg-maximize').on('click.lg', () => {\n            this.$container.toggleClass('lg-inline');\n            this.refreshOnResize();\n        });\n    }\n\n    invalidateItems(): void {\n        for (let index = 0; index < this.items.length; index++) {\n            const element = this.items[index];\n            const $element = $LG(element);\n            $element.off(`click.lgcustom-item-${$element.attr('data-lg-id')}`);\n        }\n    }\n\n    trapFocus(): void {\n        this.$container.get().focus({\n            preventScroll: true,\n        });\n        $LG(window).on(`keydown.lg.global${this.lgId}`, (e) => {\n            if (!this.lgOpened) {\n                return;\n            }\n\n            const isTabPressed = e.key === 'Tab' || e.keyCode === 9;\n            if (!isTabPressed) {\n                return;\n            }\n            const focusableEls = utils.getFocusableElements(\n                this.$container.get(),\n            );\n            const firstFocusableEl = focusableEls[0];\n            const lastFocusableEl = focusableEls[focusableEls.length - 1];\n\n            if (e.shiftKey) {\n                if (document.activeElement === firstFocusableEl) {\n                    (lastFocusableEl as HTMLElement).focus();\n                    e.preventDefault();\n                }\n            } else {\n                if (document.activeElement === lastFocusableEl) {\n                    (firstFocusableEl as HTMLElement).focus();\n                    e.preventDefault();\n                }\n            }\n        });\n    }\n\n    manageCloseGallery(): void {\n        if (!this.settings.closable) return;\n        let mousedown = false;\n        this.getElementById('lg-close').on('click.lg', () => {\n            this.closeGallery();\n        });\n\n        if (this.settings.closeOnTap) {\n            // If you drag the slide and release outside gallery gets close on chrome\n            // for preventing this check mousedown and mouseup happened on .lg-item or lg-outer\n            this.outer.on('mousedown.lg', (e) => {\n                const target = $LG(e.target);\n                if (this.isSlideElement(target)) {\n                    mousedown = true;\n                } else {\n                    mousedown = false;\n                }\n            });\n\n            this.outer.on('mousemove.lg', () => {\n                mousedown = false;\n            });\n\n            this.outer.on('mouseup.lg', (e) => {\n                const target = $LG(e.target);\n                if (this.isSlideElement(target) && mousedown) {\n                    if (!this.outer.hasClass('lg-dragging')) {\n                        this.closeGallery();\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Close lightGallery if it is opened.\n     *\n     * @description If closable is false in the settings, you need to pass true via closeGallery method to force close gallery\n     * @return returns the estimated time to close gallery completely including the close animation duration\n     * @category lGPublicMethods\n     * @example\n     *  const plugin = lightGallery();\n     *  plugin.closeGallery();\n     *\n     */\n    closeGallery(force?: boolean): number {\n        if (!this.lgOpened || (!this.settings.closable && !force)) {\n            return 0;\n        }\n        this.LGel.trigger(lGEvents.beforeClose);\n\n        if (this.settings.resetScrollPosition && !this.settings.hideScrollbar) {\n            $LG(window).scrollTop(this.prevScrollTop);\n        }\n\n        const currentItem = this.items[this.index];\n        let transform: string | undefined;\n        if (this.zoomFromOrigin && currentItem) {\n            const { top, bottom } = this.mediaContainerPosition;\n            const { __slideVideoInfo, poster } = this.galleryItems[this.index];\n            const imageSize = utils.getSize(\n                currentItem,\n                this.outer,\n                top + bottom,\n                __slideVideoInfo && poster && this.settings.videoMaxSize,\n            );\n            transform = utils.getTransform(\n                currentItem,\n                this.outer,\n                top,\n                bottom,\n                imageSize,\n            );\n        }\n        if (this.zoomFromOrigin && transform) {\n            this.outer.addClass('lg-closing lg-zoom-from-image');\n            this.getSlideItem(this.index)\n                .addClass('lg-start-end-progress')\n                .css(\n                    'transition-duration',\n                    this.settings.startAnimationDuration + 'ms',\n                )\n                .css('transform', transform);\n        } else {\n            this.outer.addClass('lg-hide-items');\n            // lg-zoom-from-image is used for setting the opacity to 1 if zoomFromOrigin is true\n            // If the closing item doesn't have the lg-size attribute, remove this class to avoid the closing css conflicts\n            this.outer.removeClass('lg-zoom-from-image');\n        }\n\n        // Unbind all events added by lightGallery\n        // @todo\n        //this.$el.off('.lg.tm');\n\n        this.destroyModules();\n\n        this.lGalleryOn = false;\n        this.isDummyImageRemoved = false;\n        this.zoomFromOrigin = this.settings.zoomFromOrigin;\n\n        clearTimeout(this.hideBarTimeout);\n        this.hideBarTimeout = false;\n        $LG('html').removeClass('lg-on');\n\n        this.outer.removeClass('lg-visible lg-components-open');\n\n        // Resetting opacity to 0 isd required as  vertical swipe to close function adds inline opacity.\n        this.$backdrop.removeClass('in').css('opacity', 0);\n\n        const removeTimeout =\n            this.zoomFromOrigin && transform\n                ? Math.max(\n                      this.settings.startAnimationDuration,\n                      this.settings.backdropDuration,\n                  )\n                : this.settings.backdropDuration;\n        this.$container.removeClass('lg-show-in');\n\n        // Once the closign animation is completed and gallery is invisible\n        setTimeout(() => {\n            if (this.zoomFromOrigin && transform) {\n                this.outer.removeClass('lg-zoom-from-image');\n            }\n            this.$container.removeClass('lg-show');\n\n            // Reset scrollbar\n            this.resetScrollBar();\n\n            // Need to remove inline opacity as it is used in the stylesheet as well\n            this.$backdrop\n                .removeAttr('style')\n                .css(\n                    'transition-duration',\n                    this.settings.backdropDuration + 'ms',\n                );\n\n            this.outer.removeClass(`lg-closing ${this.settings.startClass}`);\n\n            this.getSlideItem(this.index).removeClass('lg-start-end-progress');\n            this.$inner.empty();\n            if (this.lgOpened) {\n                this.LGel.trigger(lGEvents.afterClose, {\n                    instance: this,\n                });\n            }\n            if (this.$container.get()) {\n                this.$container.get().blur();\n            }\n\n            this.lgOpened = false;\n        }, removeTimeout + 100);\n        return removeTimeout + 100;\n    }\n\n    initModules(): void {\n        this.plugins.forEach((module) => {\n            try {\n                module.init();\n            } catch (err) {\n                console.warn(\n                    `lightGallery:- make sure lightGallery module is properly initiated`,\n                );\n            }\n        });\n    }\n\n    destroyModules(destroy?: true): void {\n        this.plugins.forEach((module) => {\n            try {\n                if (destroy) {\n                    module.destroy();\n                } else {\n                    module.closeGallery && module.closeGallery();\n                }\n            } catch (err) {\n                console.warn(\n                    `lightGallery:- make sure lightGallery module is properly destroyed`,\n                );\n            }\n        });\n    }\n\n    /**\n     * Refresh lightGallery with new set of children.\n     *\n     * @description This is useful to update the gallery when the child elements are changed without calling destroy method.\n     *\n     * If you are using dynamic mode, you can pass the modified array of dynamicEl as the first parameter to refresh the dynamic gallery\n     * @see <a href=\"/demos/dynamic-mode/\">Demo</a>\n     * @category lGPublicMethods\n     * @example\n     *  const plugin = lightGallery();\n     *  // Delete or add children, then call\n     *  plugin.refresh();\n     *\n     */\n    refresh(galleryItems?: GalleryItem[]): void {\n        if (!this.settings.dynamic) {\n            this.invalidateItems();\n        }\n        if (galleryItems) {\n            this.galleryItems = galleryItems;\n        } else {\n            this.galleryItems = this.getItems();\n        }\n        this.updateControls();\n        this.openGalleryOnItemClick();\n        this.LGel.trigger(lGEvents.updateSlides);\n    }\n\n    updateControls(): void {\n        this.addSlideVideoInfo(this.galleryItems);\n        this.updateCounterTotal();\n        this.manageSingleSlideClassName();\n    }\n\n    private destroyGallery(): void {\n        this.destroyModules(true);\n        if (!this.settings.dynamic) {\n            this.invalidateItems();\n        }\n        $LG(window).off(`.lg.global${this.lgId}`);\n        this.LGel.off('.lg');\n        this.$container.remove();\n    }\n\n    /**\n     * Destroy lightGallery.\n     * Destroy lightGallery and its plugin instances completely\n     *\n     * @description This method also calls CloseGallery function internally. Returns the time takes to completely close and destroy the instance.\n     * In case if you want to re-initialize lightGallery right after destroying it, initialize it only once the destroy process is completed.\n     * You can use refresh method most of the times.\n     * @category lGPublicMethods\n     * @example\n     *  const plugin = lightGallery();\n     *  plugin.destroy();\n     *\n     */\n    destroy(): number {\n        const closeTimeout = this.closeGallery(true);\n        if (closeTimeout) {\n            setTimeout(this.destroyGallery.bind(this), closeTimeout);\n        } else {\n            this.destroyGallery();\n        }\n        return closeTimeout;\n    }\n}\n"]}